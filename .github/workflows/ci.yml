name: CI

on:
  push:
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GTEST_REF: b85864c64758dec007208e56af933fc3f52044ee

jobs:
  build-on-ubuntu:
    runs-on: ubuntu-latest

    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.24.x'
    - name: Test cmake version
      run: cmake --version
    
    - name: Set relative paths
      run: | 
        GTEST=$GITHUB_WORKSPACE/googletest
        echo "GTEST=$GTEST" >> $GITHUB_ENV
        SSCDIR=$GITHUB_WORKSPACE/ssc
        echo "SSCDIR=$SSCDIR" >> $GITHUB_ENV
    
    - name: Get cached GTest
      uses: actions/cache@v4
      id: cachedgtest
      with:
        path: ${{env.GTEST}}/
        key: gtest-ubuntu

    - name: Clone Gtest
      if: steps.cachedgtest.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: google/googletest
        path: googletest
        ref: ${{env.GTEST_REF}}
    
    - name: build Gtest
      if: steps.cachedgtest.outputs.cache-hit != 'true'
      run: | 
          export 
          mkdir ${GTEST}/build
          cd ${GTEST}/build
          cmake -DCMAKE_CXX_FLAGS=-std=c++11 ..
          make          
    
    - name: Checkout SSC
      uses: actions/checkout@v4
      with:
         path: ssc

    - name: Configure CMake
      # Configure cmake to build ssc tests but not tools
      run: |
        mkdir ${SSCDIR}/build
        cd ${SSCDIR}/build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DSAM_SKIP_TOOLS=1

    - name: Build
      # Build your program with the given configuration
      run: |
        cd ${SSCDIR}/build
        make -j4

    - name: Test
      # Turn off fast fail for when the landbosse tests write to cerr
      shell: bash
      run: |
        set -e
        ${SSCDIR}/build/test/Test
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
          name: SSC Linux Shared Libraries
          path: |
            ${{env.SSCDIR}}/build/ssc/libssc.so
            ${{env.SSCDIR}}/build/ssc/ssc.so
      
  build-on-mac:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14-large, macos-latest]

    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.24.x'
    - name: Test cmake version
      run: cmake --version
    
    - name: Set relative paths
      run: | 
        GTEST=$GITHUB_WORKSPACE/googletest
        echo "GTEST=$GTEST" >> $GITHUB_ENV
        SSCDIR=$GITHUB_WORKSPACE/ssc
        echo "SSCDIR=$SSCDIR" >> $GITHUB_ENV
    
    - name: Get cached GTest
      uses: actions/cache@v4
      id: cachedgtest
      with:
        path: ${{env.GTEST}}/
        key: gtest-${{ matrix.os }}
    - name: Clone Gtest
      if: steps.cachedgtest.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: google/googletest
        path: googletest
        ref: ${{env.GTEST_REF}}
    
    - name: build Gtest
      if: steps.cachedgtest.outputs.cache-hit != 'true'
      run: | 
          export 
          mkdir ${GTEST}/build
          cd ${GTEST}/build
          cmake -DCMAKE_CXX_FLAGS=-std=c++11 ..
          make          
    
    - name: Checkout SSC
      uses: actions/checkout@v4
      with:
         path: ssc

    - name: Configure CMake
      # Configure cmake to build ssc tests but not tools
      run: |
        mkdir ${SSCDIR}/build
        cd ${SSCDIR}/build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DSAM_SKIP_TOOLS=1 -DSAMAPI_EXPORT=0 

    - name: Build
      # Build your program with the given configuration
      run: |
        cd ${SSCDIR}/build
        make -j3

    - name: Test
      # Turn off fast fail for when the landbosse tests write to cerr
      run: |
        set -e
        ${SSCDIR}/build/test/Test
      shell: bash      
    
    - name: Upload Artifacts
      if: ${{ matrix.os == 'macos-latest' }}
      uses: actions/upload-artifact@v4
      with:
          name: SSC Mac Arm Shared Libraries
          path: |
            ${{env.SSCDIR}}/build/ssc/libssc.dylib
            ${{env.SSCDIR}}/build/ssc/ssc.dylib 

    - name: Upload Artifacts
      if: ${{ matrix.os != 'macos-latest' }}
      uses: actions/upload-artifact@v4
      with:
          name: SSC Mac Intel Shared Libraries
          path: |
            ${{env.SSCDIR}}/build/ssc/libssc.dylib
            ${{env.SSCDIR}}/build/ssc/ssc.dylib 

  build-on-windows:
    runs-on: windows-2019

    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.24.x'
    - name: Test cmake version
      run: cmake --version
    
    - name: Set relative paths
      shell: bash
      run: | 
        GTEST=$GITHUB_WORKSPACE/googletest
        echo "GTEST=$GTEST" >> $GITHUB_ENV
        SSCDIR=$GITHUB_WORKSPACE/ssc
        echo "SSCDIR=$SSCDIR" >> $GITHUB_ENV
    
    - name: Get cached GTest
      uses: actions/cache@v4
      id: cachedgtest
      with:
        path: ${{env.GTEST}}/
        key: gtest-windows

    - name: Clone Gtest
      if: steps.cachedgtest.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: google/googletest
        path: googletest
        ref: ${{env.GTEST_REF}}
    
    - name: build Gtest
      if: steps.cachedgtest.outputs.cache-hit != 'true'
      shell: bash
      run: | 
          export 
          mkdir ${GTEST}/build
          cd ${GTEST}/build
          cmake -Dgtest_force_shared_crt=ON ..
          cmake --build . --config Release -j4
    
    - name: Checkout SSC
      uses: actions/checkout@v4
      with:
          path: ssc

    - name: Configure CMake
      shell: bash
      # Configure cmake to build ssc tests but not tools
      run: |
        mkdir ${SSCDIR}/build
        cd ${SSCDIR}/build
        cmake .. -DSAM_SKIP_TOOLS=1 -DCMAKE_CONFIGURATION_TYPES="Release"
        cmake --build . --config Release -j4
        cp ssc/Release/* test/Release

    - name: Test
      shell: bash
      # Turn off fast fail for when the landbosse tests write to cerr
      run: |
        cd ${SSCDIR}/build/test/Release
        ./Test.exe
  
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
          name: SSC Windows Shared Libraries
          path: |
            ${{env.SSCDIR}}\build\ssc\Release\ssc.dll
