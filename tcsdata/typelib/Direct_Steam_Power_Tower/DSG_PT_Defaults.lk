clear();

// **** Define tcs directory *******************
tcs_dir = 'C:/svn_NREL/main/ssc';
// *********************************************

//********************************************************************************************
// Pre-processing input files
//Read in field efficiency files
eff_array_loc = tcs_dir + '/tcs/typelib/Direct_Steam_Power_Tower/eff_array.dat';
f = open( eff_array_loc, 'r' );

if( !f )
{
	outln("Could not open file for reading");
	exit;
}

line = 'string';
read_line(f, line);
azimuth = split( line, ',' );
read_line(f, line);
zenith = split( line, ',' );

num_azi = #azimuth;
num_zen = #zenith;
num_sol_pos = num_azi * num_zen;

eta_field_map = alloc( num_sol_pos, 3 );

for( i = 0; i < num_azi; i++ )
	for( j = 0; j < num_zen; j++ )
	{
		eta_field_map[i*num_zen+j][1] = azimuth[i]; 
		eta_field_map[i*num_zen+j][0] = zenith[j];
	}

for( i = 0; i < num_sol_pos; i++ )
{
	read_line(f, eta_field_map[i][2]);
}
close( f );

//***** Read in flux file ********
fluxmap_loc = tcs_dir + '/tcs/typelib/Direct_Steam_Power_Tower/fluxmap.csv';
f = open( fluxmap_loc, 'r' );

if( !f )
{
	outln("Could not open file for reading");
	exit;
}

i = 1;
while( read_line(f, line) )
{
	if( line == ' Azimuth,Zenith' ) 	
		break;
	i++;
	if( i > 200 ) 	
	{
		outln("Flux map is not using recognized formatting. Exiting..");
		exit;
	}
}

num_sol_pos = i - 5;
arr_sol_pos = alloc( 2, num_sol_pos );

close( f );
f = open( fluxmap_loc, 'r' );

for( i = 0; i < 4; i++ )
{
	read_line(f, line);
}

// Read and save azimuth and zenith angles
for( i = 0; i < num_sol_pos; i++ )
{
	read_line( f, line );
	parts = split( line, ',' );
	arr_sol_pos[0][i] = parts[2];		// Azimuth 
	arr_sol_pos[1][i] = parts[3];		// Zenith
}

// Read and save flux maps and each solar position [solar position],[flux]
arr_flux = alloc( num_sol_pos, 12 );

for( i = 0; i < 3; i++ )
	read_line(f, line);

for( i = 0; i < num_sol_pos; i++ )
{
	// Reading flux map for i_th solar position: 1 rows, 12 columns
	read_line(f, line);
	parts = split( line, ',' );
	for( j = 0; j < 12; j++ )
		arr_flux[i][j] = parts[j];
	
	// If there are solar positions remaining, skip blanks rows
	if( i < (num_sol_pos - 1))
	{
		for( l = 0; l < 5; l++ )
		{	
			read_line( f, line );
		}
	}
}
outln( "read in flux map" );
//********************************************************************************************
//********************************************************************************************

debug_mode = true;

//Add weather file reader unit
if(debug_mode) weather = add_unit("trnsys_weatherreader");
else weather = add_unit("weatherreader");

if(debug_mode)
{
	file_loc = tcs_dir + '/tcs/typelib/TRNSYS_weather_outputs/daggett_trnsys_weather.out';
	set_value( weather, "file_name", file_loc );
	set_value( weather, "i_hour", "TIME" );
	set_value( weather, "i_month", "month" );
	set_value( weather, "i_day", "day" );
	set_value( weather, "i_global", "GlobalHorizontal" );
	set_value( weather, "i_beam", "DNI" );
	set_value( weather, "i_diff", "DiffuseHorizontal" );
	set_value( weather, "i_tdry", "T_dry" );
	set_value( weather, "i_twet", "T_wet" );
	set_value( weather, "i_tdew", "T_dew" );
	set_value( weather, "i_wspd", "WindSpeed" );
	set_value( weather, "i_wdir", "WindDir" );
	set_value( weather, "i_rhum", "RelHum" );
	set_value( weather, "i_pres", "AtmPres" );
	set_value( weather, "i_snow", "SnowCover" );
	set_value( weather, "i_albedo", "GroundAlbedo" );
	set_value( weather, "i_poa", "POA" );
	set_value( weather, "i_solazi", "Azimuth" );
	set_value( weather, "i_solzen", "Zenith" );
	set_value( weather, "i_lat", "Latitude" );
	set_value( weather, "i_lon", "Longitude" );
	set_value( weather, "i_shift", "Shift" );
}
else
{
	//Set weather parameters
	weather_file = "C:/SAM/2013.1.15/exelib/climate_files/CA Daggett.tm2";
	//if (ostype() == 'osx64') weather_file = '/Users/adobos/Projects/ssc/examples/daggett.tm2';

	set_value(weather, "file_name", weather_file);
	set_value(weather, "track_mode", 1);
	set_value(weather, "tilt", 0);
	set_value(weather, "azimuth", 0);
}

// ************************************************
// ****** Inputs from TRNSYS Deck File ************
// ************************************************
// *********************** HELIOSTAT FIELD PAGE **********************
num_zen = 8;
num_azi = 13;
num_helio = 5688;
wind_stow_speed = 15;
h_helio = 12;
w_helio = 12;
hel_dens = 0.97;
hel_stow_deploy = 8;
field_angle = 180.0;
// *********************** RECEIVER/TOWER FIELD PAGE **********************
d_rec = 15.78;
h_rec = 22.4;
num_panels = 12;
h_tower = 161.11;
h_boiler = 9.2;
h_SH = 8.4;
h_RH = 4.8;
d_boiler = 0.0254;
th_boiler = 0.002159;
emis_boiler = 0.88;
abs_boiler = 0.94;
Mat_boiler = 2;
th_fin = 0.0015875;
L_fin = 0;
emis_fin = 0.88;
abs_fin = 0.94;
Mat_fin = 2;
x_b_target = 0.5;
d_SH = 0.01905;
th_SH = 0.001651;
emis_SH = 0.88;
abs_SH = 0.94;
Mat_SH = 2;
T_SH_out_ref = 550;
d_RH = 0.0381;
th_RH = 0.002159;
emis_RH = 0.88;
abs_RH = 0.94;
Mat_RH = 2;
T_rh_out_ref = 500;
flow_pattern = 2;
f_rec_min = 0.25;
Q_rec_des = 405.036;
rec_su_delay = 0.3;
rec_qf_delay = 0.2;
hl_ffact = 1;
nazm = 12;
nrad = 12;
Plant_lattitude = 34.8667;
//****************Power Block page****************
P_cycle_design = 111.25;
Eff_cycle_design = 0.412;
P_HP_in = 160;
P_HP_out = 40;
rh_frac_ref = 0.85;
LHV_eff = 0.9;
pb_bd_frac = 0.02;
T_standby = 2;
F_standby = 0.2;
startup_time = 0.35;
startup_frac = 0.35;
cycle_cutoff_frac = 0.25;
cycle_max_fraction = 1.05;
T_amb_des = 43;
dT_cooling_ref = 10;
Cool_type = 2;
T_approach = 5;
T_ITD_des = 16;
P_cond_ratio = 1.0028;
min_cond_pres = 1.25;
hr_pl_nlev = 8;
HC_LOGIC0 = 0;
HC_LOGIC1 = 0;
HC_LOGIC2 = 0;
HC_LOGIC3 = 0;
HC_LOGIC4 = 0;
HC_LOGIC5 = 0;
HC_LOGIC6 = 0;
HC_LOGIC7 = 0;
HC_LOGIC8 = 0;
fossil_mode = 1;
NUMTOU = 9;
FOSSILFI = 0;
FOSSILF1 = 0;
FOSSILF2 = 0;
FOSSILF3 = 0;
FOSSILF4 = 0;
FOSSILF5 = 0;
FOSSILF6 = 0;
FOSSILF7 = 0;
FOSSILF8 = 0;
//****************Parasitics page****************
P_hel_start = 0.025;
P_hel_track = 0.055;
eta_rec_pump = 0.85;
pb_fixed_par = 0.0055;
piping_loss = 10200;
piping_length = 418.886;
aux_par_0 = 0.483;
aux_par_1 = 0.517;
aux_par_2 = 0;
aux_par_f = 1;
aux_par = 0.023;
bop_par_0 = 0.483;
bop_par_1 = 0.517;
bop_par_2 = 0;
bop_par_f = 1;
bop_par = 0;

// Add TCS units
hel_field = add_unit("sam_mw_pt_type221");
dsg_controller = add_unit("sam_dsg_controller_type265");
powerblock = add_unit("sam_mw_type234");
parasitics = add_unit("sam_mw_pt_type228");

// Set heliostat field parameters
set_value( hel_field, "eta_map", eta_field_map );
set_value( hel_field, "n_zen", num_zen );
set_value( hel_field, "n_azi", num_azi );
set_value( hel_field, "n_hel", num_helio );
set_value( hel_field, "q_start", P_hel_start );
set_value( hel_field, "p_run", P_hel_track );
set_value( hel_field, "v_wind_max", wind_stow_speed );
set_value( hel_field, "hel_stow_deploy", hel_stow_deploy );

// Connect heliostat field inputs
connect( weather, "wspd", hel_field, "vwind" );
connect( weather, "solzen", hel_field, "theta" );
connect( weather, "solazi", hel_field, "phi" );
set_value( hel_field, "field_control", 1.0 );

//Set DSG Controller Parameters
q_pb_design = P_cycle_design/Eff_cycle_design;
set_value( dsg_controller, "fossil_mode", fossil_mode);
set_value( dsg_controller, "q_pb_design", q_pb_design);
set_value( dsg_controller, "q_aux_max", q_pb_design);
set_value( dsg_controller, "lhv_eff", LHV_eff);
set_value( dsg_controller, "h_tower", h_tower);
set_value( dsg_controller, "n_panels", num_panels);
set_value( dsg_controller, "flowtype", flow_pattern);
set_value( dsg_controller, "d_rec", d_rec);
set_value( dsg_controller, "q_rec_des", Q_rec_des);
set_value( dsg_controller, "f_rec_min", f_rec_min);
set_value( dsg_controller, "rec_qf_delay", rec_qf_delay);
set_value( dsg_controller, "rec_su_delay", rec_su_delay);
set_value( dsg_controller, "f_pb_cutoff", cycle_cutoff_frac);
set_value( dsg_controller, "f_pb_sb", F_standby);
set_value( dsg_controller, "t_standby_ini", T_standby);
set_value( dsg_controller, "x_b_target", x_b_target);
set_value( dsg_controller, "eta_rec_pump", eta_rec_pump);
set_value( dsg_controller, "P_hp_in_des", P_HP_in);
set_value( dsg_controller, "P_hp_out_des", P_HP_out);
set_value( dsg_controller, "f_mdotrh_des", rh_frac_ref);
set_value( dsg_controller, "p_cycle_design", P_cycle_design);
set_value( dsg_controller, "ct", Cool_type);
set_value( dsg_controller, "T_amb_des", T_amb_des);
set_value( dsg_controller, "dT_cw_ref", dT_cooling_ref);
set_value( dsg_controller, "T_approach", T_approach);
set_value( dsg_controller, "T_ITD_des", T_ITD_des);
set_value( dsg_controller, "hl_ffact", hl_ffact);
set_value( dsg_controller, "h_boiler", h_boiler);
set_value( dsg_controller, "d_t_boiler", d_boiler);
set_value( dsg_controller, "th_t_boiler", th_boiler);
set_value( dsg_controller, "emis_boiler", emis_boiler);
set_value( dsg_controller, "abs_boiler", abs_boiler);
set_value( dsg_controller, "mat_boiler", Mat_boiler);
set_value( dsg_controller, "th_fin", th_fin);
set_value( dsg_controller, "l_fin", L_fin);
set_value( dsg_controller, "emis_fin", emis_fin);
set_value( dsg_controller, "abs_fin", abs_fin);
set_value( dsg_controller, "mat_fin", Mat_fin);
set_value( dsg_controller, "h_sh", h_SH);
set_value( dsg_controller, "d_sh", d_SH);
set_value( dsg_controller, "th_sh", th_SH);
set_value( dsg_controller, "emis_sh", emis_SH);
set_value( dsg_controller, "abs_sh", abs_SH);
set_value( dsg_controller, "mat_sh", Mat_SH);
set_value( dsg_controller, "T_sh_out_des", T_SH_out_ref);
set_value( dsg_controller, "h_rh", h_RH);
set_value( dsg_controller, "d_rh", d_RH);
set_value( dsg_controller, "th_rh", th_RH);
set_value( dsg_controller, "emis_rh", emis_RH);
set_value( dsg_controller, "abs_rh", abs_RH);
set_value( dsg_controller, "mat_rh", Mat_RH);
set_value( dsg_controller, "T_rh_out_des", T_rh_out_ref);
set_value( dsg_controller, "cycle_max_frac", cycle_max_fraction);
A_sf = num_helio*h_helio*w_helio*hel_dens; //5688*12*12*.97=794,499.84
set_value( dsg_controller, "A_sf", A_sf );
set_value( dsg_controller, "fluxmap_angles", arr_sol_pos);
set_value( dsg_controller, "fluxmap", arr_flux);

// Connect DSG Controller Inputs
connect(weather, "solazi", dsg_controller, "azimuth");
connect(weather, "solzen", dsg_controller, "zenith");
connect(weather, "beam", dsg_controller, "DNI");
connect(weather, "tdry", dsg_controller, "T_amb");
connect(weather, "wspd", dsg_controller, "v_wind_10");
connect(weather, "pres", dsg_controller, "P_atm");
connect(weather, "tdew", dsg_controller, "T_dp");
connect(hel_field, "eta_field", dsg_controller, "field_eff");
connect(powerblock, "P_boiler_in", dsg_controller, "P_b_in");
set_value(dsg_controller, "P_b_in", P_HP_in);			// Initial value
connect(powerblock, "f_rh", dsg_controller, "f_mdot_rh");
set_value(dsg_controller, "f_mdot_rh", rh_frac_ref);	// Initial value
connect(powerblock, "P_rh_in", dsg_controller, "P_hp_out");
set_value(dsg_controller, "P_hp_out", P_HP_out);		// Initial value
connect(powerblock, "T_rh_in", dsg_controller, "T_hp_out");
set_value(dsg_controller, "T_hp_out", 300);				// Initial value
connect(powerblock, "T_rh_out", dsg_controller, "T_rh_target");
set_value(dsg_controller, "T_rh_target", T_rh_out_ref);	// Initial value
connect(powerblock, "T_cold", dsg_controller, "T_fw");
set_value(dsg_controller, "T_fw", 340);					// Initial value
connect(powerblock, "P_cond", dsg_controller, "P_cond");
set_value(dsg_controller, "P_cond", P_HP_out);			// Initial value

// Connect Powerblock Parameters
is_rh = 1;
tech_type = 5;
set_value(powerblock, "P_ref", P_cycle_design);
set_value(powerblock, "eta_ref", Eff_cycle_design);
set_value(powerblock, "T_hot_ref", T_SH_out_ref);
set_value(powerblock, "T_cold_ref", -1.23);				// This value isn't used in DSG
set_value(powerblock, "dT_cw_ref", dT_cooling_ref);
set_value(powerblock, "T_amb_des", T_amb_des);
set_value(powerblock, "q_sby_frac", F_standby);
set_value(powerblock, "P_boil_des", P_HP_in);
set_value(powerblock, "is_rh", is_rh);
set_value(powerblock, "P_rh_ref", P_HP_out);
set_value(powerblock, "T_rh_hot_ref", T_rh_out_ref);
set_value(powerblock, "rh_frac_ref", rh_frac_ref);
set_value(powerblock, "CT", Cool_type);
set_value(powerblock, "startup_time", startup_time);
set_value(powerblock, "startup_frac", startup_frac);
set_value(powerblock, "tech_type", tech_type);
set_value(powerblock, "T_approach", T_approach);
set_value(powerblock, "T_ITD_des", T_ITD_des);
set_value(powerblock, "P_cond_ratio", P_cond_ratio);
set_value(powerblock, "pb_bd_frac", pb_bd_frac);
set_value(powerblock, "P_cond_min", min_cond_pres);
set_value(powerblock, "n_pl_inc", hr_pl_nlev);
set_value(powerblock, "F_wc", [HC_LOGIC0, HC_LOGIC1, HC_LOGIC2, HC_LOGIC3, HC_LOGIC4, HC_LOGIC5, HC_LOGIC6, HC_LOGIC7, HC_LOGIC8]);

// Connect Powerblock Inputs
set_value(powerblock, "mode", 2);
set_value(powerblock, "T_hot", T_SH_out_ref);
connect(dsg_controller, "m_dot_toPB", powerblock, "m_dot_st");
connect(weather, "twet", powerblock, "T_wb");
connect(dsg_controller, "m_dot_toPB", powerblock, "m_dot_st");
connect(dsg_controller, "standby_control", powerblock, "standby_control");
connect(weather, "tdry", powerblock, "T_db");
connect(weather, "pres", powerblock, "P_amb");
set_value(powerblock, "TOU", 1);
connect(weather, "rhum", powerblock, "relhum");
connect(dsg_controller, "f_timestep", powerblock, "f_recSU");
connect(dsg_controller, "P_drop_b", powerblock, "dp_b");
connect(dsg_controller, "dP_sh", powerblock, "dp_sh");
connect(dsg_controller, "dP_rh", powerblock, "dp_rh");

// Set Parasitics Parameters
P_storage_pump = 0.0;
recirc_htr_eff = 1.0;
night_recirc = 0.0;
storage_bypass = 0.0;
set_value(parasitics, "P_storage_pump", P_storage_pump);
set_value(parasitics, "Piping_loss", piping_loss );
set_value(parasitics, "Piping_length", piping_length );
set_value(parasitics, "Design_power", P_cycle_design );
set_value(parasitics, "recirc_htr_eff", recirc_htr_eff );
set_value(parasitics, "design_eff", Eff_cycle_design );
set_value(parasitics, "night_recirc", night_recirc );
set_value(parasitics, "pb_fixed_par", pb_fixed_par );
set_value(parasitics, "aux_par", aux_par );
set_value(parasitics, "aux_par_f", aux_par_f );
set_value(parasitics, "aux_par_0", aux_par_0 );
set_value(parasitics, "aux_par_1", aux_par_1 );
set_value(parasitics, "aux_par_2", aux_par_2 );
set_value(parasitics, "bop_par", bop_par );
set_value(parasitics, "bop_par_f", bop_par_f );
set_value(parasitics, "bop_par_0", bop_par_0 );
set_value(parasitics, "bop_par_1", bop_par_1 );
set_value(parasitics, "bop_par_2", bop_par_2 );
set_value(parasitics, "storage_bypass", storage_bypass );

// Set Parasitics Inputs
set_value(parasitics, "flow_from_storage", 0.0);
connect(powerblock, "W_cool_par", parasitics, "P_cooling_tower");
connect(dsg_controller, "W_dot_boost", parasitics, "P_tower_pump");
connect(hel_field, "pparasi", parasitics, "P_helio_track");
connect(powerblock, "P_cycle", parasitics, "P_plant_output");
connect(powerblock, "eta", parasitics, "eta_cycle");
set_value(parasitics, "P_cold_tank", 0.0);
set_value(parasitics, "P_hot_tank", 0.0);
set_value(parasitics, "P_tower_conv", 0.0);
set_value(parasitics, "P_tower_rad", 0.0);
set_value(parasitics, "recirc_source", 0.0);
set_value(parasitics, "ref_htf_flow", 0.0);
connect(dsg_controller, "q_aux", parasitics, "aux_power");
set_value(parasitics, "P_htf_pump", 0.0);

//simulate(1,2000,1,30,false);

simulate(1,8760,1,30,false);