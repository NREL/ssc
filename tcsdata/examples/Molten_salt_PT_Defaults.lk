clear();

//****** Get SSC directory ********
file_dir = env('SSCDIR')+'/tcsdata/typelib/MS_External_Power_Tower';
//*********************************

//********************************************************************************************
// Pre-processing input files
//Read in field efficiency files
eff_array_loc = file_dir + '/eff_array.dat';
f = open( eff_array_loc, 'r' );

if( !f )
{
	outln("Could not open file for reading");
	exit;
}

line = 'string';
read_line(f, line);
azimuth = split( line, ',' );
read_line(f, line);
zenith = split( line, ',' );

num_azi = #azimuth;
num_zen = #zenith;
num_sol_pos = num_azi * num_zen;

eta_field_map = alloc( num_sol_pos, 3 );

for( i = 0; i < num_azi; i++ )
	for( j = 0; j < num_zen; j++ )
	{
		eta_field_map[i*num_zen+j][1] = azimuth[i]; 
		eta_field_map[i*num_zen+j][0] = zenith[j];
	}

for( i = 0; i < num_sol_pos; i++ )
{
	read_line(f, eta_field_map[i][2]);
}
close( f );

//***** Read in flux file ********
fluxmap_loc = file_dir + '/fluxmap.csv';
f = open( fluxmap_loc, 'r' );

if( !f )
{
	outln("Could not open file for reading");
	exit;
}

i = 1;
while( read_line(f, line) )
{
	if( line == ' Azimuth,Zenith' ) 	
		break;
	i++;
	if( i > 200 ) 	
	{
		outln("Flux map is not using recognized formatting. Exiting..");
		exit;
	}
}

num_sol_pos = i - 5;
arr_sol_pos = alloc( 2, num_sol_pos );

close( f );
f = open( fluxmap_loc, 'r' );

for( i = 0; i < 4; i++ )
{
	read_line(f, line);
}

// Read and save azimuth and zenith angles
for( i = 0; i < num_sol_pos; i++ )
{
	read_line( f, line );
	parts = split( line, ',' );
	arr_sol_pos[0][i] = parts[2];		// Azimuth 
	arr_sol_pos[1][i] = parts[3];		// Zenith
}

// Read and save flux maps and each solar position [solar position],[flux]
arr_flux = alloc( num_sol_pos, 12 );

for( i = 0; i < 3; i++ )
	read_line(f, line);

for( i = 0; i < num_sol_pos; i++ )
{
	// Reading flux map for i_th solar position: 1 rows, 12 columns
	read_line(f, line);
	parts = split( line, ',' );
	for( j = 0; j < 12; j++ )
		arr_flux[i][j] = parts[j];
	
	// If there are solar positions remaining, skip blanks rows
	if( i < (num_sol_pos - 1))
	{
		for( l = 0; l < 5; l++ )
		{	
			read_line( f, line );
		}
	}
}
outln( "read in flux map" );

// ******** Read in Time-of-Use file **********
f = open( file_dir + '/touperiod.in', 'r' );
if( !f )
{
	outln("Could not open time-of-use file for reading");
	exit;
}
read_line(f, line);

tou_week = alloc( 12, 24 );
tou_end = alloc( 12, 24 );

for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[1-1][j]);
	//out(tou_week[1-1][j]);
}
//outln();

for( i = 2; i < 6; i++ )
{	
	for( j = 0; j < 24; j++ )
	{
		read_line(f, line);
	}
}

// Jan 6th - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[1-1][j]);
	//out(tou_end[1-1][j]);
}
//outln();
//outln();

// Jan 7th -31st Wednesday
for( j = 7; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Feb 1st Thursday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[2-1][j]);
	//out(tou_week[2-1][j]);
}
//outln();

// Feb 2nd Friday
for( j = 0; j < 1; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Feb 3rd - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[2-1][j]);
	//out(tou_end[2-1][j]);
}
//outln();
//outln();

// Feb 4th - 28th - Wednesday
for( j = 4; j < 29; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Mar 1 - Thursday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[3-1][j]);
	//out(tou_week[3-1][j]);
}
//outln();

// Feb 2nd Friday
for( j = 0; j < 1; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Mar 3rd - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[3-1][j]);
	//out(tou_end[3-1][j]);
}
//outln();
//outln();

// Mar 4th - 31st - Saturday
for( j = 4; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Apr 1st - Sunday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[4-1][j]);
	//out(tou_end[4-1][j]);
}
//outln();

// Apr 2nd - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[4-1][j]);
	//out(tou_week[4-1][j]);
}
//outln();
//outln();

// Apr 3rd - 30th - Monday
for( j = 3; j < 31; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// May 1st - Tuesday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[5-1][j]);
	//out(tou_week[5-1][j]);
}
//outln();

// May 2nd - 4th - Friday
for( j = 2; j < 5; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// May 5th - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[5-1][j]);
	//out(tou_end[5-1][j]);
}
//outln();
//outln();

// May 6th - May 31st - Thursday
for( j = 6; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// June 1st - Friday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[6-1][j]);
	//out(tou_week[6-1][j]);
}
//outln();

// June 2nd - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[6-1][j]);
	//out(tou_end[6-1][j]);
}
//outln();
//outln();

// June 3rd - June 30th - Saturday
for( j = 3; j < 31; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// July 1st - Sunday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[7-1][j]);
	//out(tou_end[7-1][j]);
}
//outln();

// July 2nd - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[7-1][j]);
	//out(tou_week[7-1][j]);
}
//outln();
//outln();

// July 3rd - July 31st - Tuesday
for( j = 3; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Aug 1 - Wednesday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[8-1][j]);
	//out(tou_week[8-1][j]);
}
//outln();

// Augst 2 - 3 Friday
for( j = 2; j < 4; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// August 4th - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[8-1][j]);
	//out(tou_end[8-1][j]);
}
//outln();
//outln();

// Augst 5 - 31 Friday
for( j = 5; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Sep 1 - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[9-1][j]);
	//out(tou_end[9-1][j]);
}
//outln();

// Sep 2 - Sunday
for( j = 2; j < 3; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Sep 3 - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[9-1][j]);
	//out(tou_week[9-1][j]);
}
//outln();
//outln();

// Sep 4 - 30 Sunday
for( j = 4; j < 31; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Oct 1 - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[10-1][j]);
	//out(tou_week[10-1][j]);
}
//outln();

// Oct 2 - 5 - Friday
for( j = 2; j < 6; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Oct 6 - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[10-1][j]);
	//out(tou_end[10-1][j]);
}
//outln();
//outln();

// Oct 7 - 31 - Wednesday + Thursday
for( j = 7; j < 32+1; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Nov 2 - Friday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[11-1][j]);
	//out(tou_week[11-1][j]);
}
//outln();

// Nov 3 - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[11-1][j]);
	//out(tou_end[11-1][j]);
}
//outln();
//outln();

// Nov 4 - Nov 30 Friday + Saturday
for( j = 4; j < 31+1; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Dec 2 - Sunday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[12-1][j]);
	//out(tou_end[12-1][j]);
}
//outln();

// Dec 3 - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[12-1][j]);
	//out(tou_week[12-1][j]);
}
//outln();

outln("Read in tou week and weekend schedules");

//********************************************************************************************
//********************************************************************************************

debug_mode = true;

//Add weather file reader unit
if(debug_mode) weather = add_unit("trnsys_weatherreader");
else weather = add_unit("weatherreader");

if(debug_mode)
{
	file_loc = env('SSCDIR') + '/tcsdata/typelib/TRNSYS_weather_outputs/daggett_trnsys_weather.out';
	set_value( weather, "file_name", file_loc );
	set_value( weather, "i_hour", "TIME" );
	set_value( weather, "i_month", "month" );
	set_value( weather, "i_day", "day" );
	set_value( weather, "i_global", "GlobalHorizontal" );
	set_value( weather, "i_beam", "DNI" );
	set_value( weather, "i_diff", "DiffuseHorizontal" );
	set_value( weather, "i_tdry", "T_dry" );
	set_value( weather, "i_twet", "T_wet" );
	set_value( weather, "i_tdew", "T_dew" );
	set_value( weather, "i_wspd", "WindSpeed" );
	set_value( weather, "i_wdir", "WindDir" );
	set_value( weather, "i_rhum", "RelHum" );
	set_value( weather, "i_pres", "AtmPres" );
	set_value( weather, "i_snow", "SnowCover" );
	set_value( weather, "i_albedo", "GroundAlbedo" );
	set_value( weather, "i_poa", "POA" );
	set_value( weather, "i_solazi", "Azimuth" );
	set_value( weather, "i_solzen", "Zenith" );
	set_value( weather, "i_lat", "Latitude" );
	set_value( weather, "i_lon", "Longitude" );
	set_value( weather, "i_shift", "Shift" );
}
else
{
	//Set weather parameters
	weather_file = "C:/SAM/2013.1.15/exelib/climate_files/CA Daggett.tm2";
	//if (ostype() == 'osx64') weather_file = '/Users/adobos/Projects/ssc/examples/daggett.tm2';

	set_value(weather, "file_name", weather_file);
	set_value(weather, "track_mode", 1);
	set_value(weather, "tilt", 0);
	set_value(weather, "azimuth", 0);
}

tou_reader = add_unit("tou_translator");

set_value( tou_reader, "weekday_schedule", tou_week );
set_value( tou_reader, "weekend_schedule", tou_end );

hel_field = add_unit("sam_mw_pt_type221");
receiver = add_unit("sam_mw_pt_type222");
controller = add_unit("sam_mw_trough_type251");
powerblock = add_unit("sam_mw_pt_type224");
parasitics = add_unit("sam_mw_pt_type228");

// Set heliostat field parameters
set_value( hel_field, "eta_map", eta_field_map );
set_value( hel_field, "n_zen", 8 );
set_value( hel_field, "n_azi", 13 );
set_value( hel_field, "n_hel", 8929 );
set_value( hel_field, "q_start", 0.025 );
set_value( hel_field, "p_run", 0.055 );
set_value( hel_field, "v_wind_max", 15.0 );
set_value( hel_field, "hel_stow_deploy", 8 );

// Set heliostat field inputs
connect( weather, "wspd", hel_field, "vwind" );
connect( weather, "solzen", hel_field, "theta" );
connect( weather, "solazi", hel_field, "phi" );
connect( controller, "defocus", hel_field, "field_control" );
// Set initial value for input from controller
set_value( controller, "defocus", 1.0 );

// Set Receiver Parameters
set_value( receiver, "N_panels", 20 );
set_value( receiver, "D_rec", 17.67 );
set_value( receiver, "H_rec", 20.41 );
set_value( receiver, "THT", 203.33 );
set_value( receiver, "d_tube_out", 40.0 );
set_value( receiver, "th_tube", 1.25 );
set_value( receiver, "mat_tube", 2 );
set_value( receiver, "rec_htf", 17 );
//set_value( receiver, "field_fl_props", {} );
set_value( receiver, "Flow_type", 1 );
set_value( receiver, "epsilon", 0.88 );
set_value( receiver, "hl_ffact", 1 );
set_value( receiver, "T_htf_hot_des", 574 );
set_value( receiver, "T_htf_cold_des", 290 );
set_value( receiver, "f_rec_min", 0.25 );
set_value( receiver, "Q_rec_des", 669.903 );
set_value( receiver, "rec_su_delay", 0.2 );
set_value( receiver, "rec_qf_delay", 0.25 );
set_value( receiver, "m_dot_htf_max", 6.764E6 );
num_helio = 8929; 
h_helio = 12.2;
w_helio = 12.2;
Hel_dens = 0.97;
A_sf = num_helio*h_helio*w_helio*Hel_dens;
set_value( receiver, "A_sf", A_sf );
set_value( receiver, "fluxmap_angles", arr_sol_pos);
set_value( receiver, "fluxmap", arr_flux);
// ***** End of Receiver Parameters ******

set_value( receiver, "azimuth", 174.309 );
set_value( receiver, "zenith", 58.0268 );
set_value( receiver, "T_salt_hot_target", 574 ); 
set_value( receiver, "T_salt_cold", 289.874 );
set_value( receiver, "V_wind_10", 0.0 );
set_value( receiver, "P_amb", 956.0 );
set_value( receiver, "eta_pump", 0.85 );
set_value( receiver, "T_dp", -5.65 );
set_value( receiver, "I_bn", 941.0 );
set_value( receiver, "field_eff", 0.535 );
set_value( receiver, "T_db", 10.3 );
set_value( receiver, "night_recirc", 0 );
set_value( receiver, "hel_stow_deploy", 8 );

// Connect the Receiver inputs to other types
night_recirc = 0.0;
connect(weather, "solazi", receiver, "azimuth");
connect(weather, "solzen", receiver, "zenith");
set_value( receiver, "T_salt_hot_target", 574.0 );
connect(controller, "T_field_in", receiver, "T_salt_cold");
connect(weather, "wspd", receiver, "V_wind_10");
connect(weather, "pres", receiver, "P_amb");
set_value( receiver, "eta_pump", 0.85 );
connect(weather, "tdew", receiver, "T_dp");
connect(weather, "beam", receiver, "I_bn");
connect(hel_field, "eta_field", receiver, "field_eff");
connect(weather, "tdry", receiver, "T_db");
set_value( receiver, "night_recirc", night_recirc );
set_value( receiver, "hel_stow_deploy", 8 ); 
// Set initial values for inputs generated from subsequently called types
set_value( receiver, "T_salt_cold", 290.0 );
set_value( receiver, "field_eff", 0.0 );
// **** End of Receiver Inputs ********

// Set Controller Parameters
HTF_field = 17;
set_value(controller, "field_fluid", HTF_field); 
set_value(controller, "field_fl_props", [0]);
HTF_store = 17;
set_value(controller, "store_fluid", HTF_store);
set_value(controller, "user_fluid", [0]);
set_value(controller, "tshours", 10);
set_value(controller, "is_hx", 0);
set_value(controller, "dt_hot", 0);
set_value(controller, "dt_cold", 0);
set_value(controller, "hx_config", 0);
P_cycle_design = 115;
eff_cycle_design = 0.412;
q_pb_design = P_cycle_design/eff_cycle_design;
set_value(controller, "q_max_aux", q_pb_design);
T_set_aux = 594.0;
set_value(controller, "T_set_aux", T_set_aux);
V_store_hot_initial = 3895.75;
set_value(controller, "V_tank_hot_ini", V_store_hot_initial);
T_store_hot_initial = 574.0;
set_value(controller, "T_tank_hot_ini", T_store_hot_initial);
T_store_cold_initial = 290.0;
set_value(controller, "T_tank_cold_ini", T_store_cold_initial);
V_tank_tot = 12985.8;
set_value(controller, "vol_tank", V_tank_tot);
h_tank = 20.0;
set_value(controller, "h_tank", h_tank);
h_tank_min = 1.0;
set_value(controller, "h_tank_min", h_tank_min);
h_tank_wetted = 0.4;
set_value(controller, "u_tank", h_tank_wetted);
tank_pairs = 1;
set_value(controller, "tank_pairs", tank_pairs);
T_htr_ctank = 280.0;
set_value(controller, "cold_tank_Thtr", T_htr_ctank);
T_htr_htank = 500.0;
set_value(controller, "hot_tank_Thtr", T_htr_htank);
Q_max_htank = 30.0;
set_value(controller, "tank_max_heat", Q_max_htank);
T_HTF_out_ref = 290.0;
set_value(controller, "T_field_in_des", T_HTF_out_ref);
HTF_rec_out = 574.0;
set_value(controller, "T_field_out_des", HTF_rec_out);
set_value(controller, "q_pb_design", q_pb_design);
set_value(controller, "W_pb_design", P_cycle_design);
cycle_max_fraction = 1.05;
set_value(controller, "cycle_max_frac", cycle_max_fraction);
cycle_cutoff_frac = 0.25;
set_value(controller, "cycle_cutoff_frac", cycle_cutoff_frac);
q_rec_des = 669.903;
solarm = q_rec_des / q_pb_design;
set_value(controller, "solarm", solarm);
pb_pump_coef = 0.55;
set_value(controller, "pb_pump_coef", pb_pump_coef);
tes_pump_coef = 0.15;
set_value(controller, "tes_pump_coef", tes_pump_coef);
set_value(controller, "pb_fixed_par", 0.0);
set_value(controller, "bop_array", [0.0,0.0,0.0,0.0,0.0]);
set_value(controller, "aux_array", [0.0,0.0,0.0,0.0,0.0]);
Cycle_min_inlet_temp = 500.0;
set_value(controller, "T_startup", Cycle_min_inlet_temp);
fossil_mode = 1;
set_value(controller, "fossil_mode", fossil_mode);
set_value(controller, "fthr_ok", 1);
set_value(controller, "nSCA", 1);
I_bn_des = 950.0;
set_value(controller, "I_bn_des", I_bn_des);
fc_on = 0;
set_value(controller, "fc_on", fc_on);
F_standby = 0.2;
set_value(controller, "q_sby_frac", F_standby);
T_standby = 2.0;
set_value(controller, "t_standby_reset", T_standby);
set_value(controller, "sf_type", 2);
Is_two_tank = 1;
set_value(controller, "tes_type", Is_two_tank);
set_value(controller, "tslogic_a", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tslogic_b", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tslogic_c", [1,1,1,1,1,1,1,1,1]);	//Not sure if TOU schedule is synced, so make all variables independent of it
set_value(controller, "ffrac", [0,0,0,0,0,0,0,0,0]);
TC_Fill = 8;
set_value(controller, "tc_fill", TC_Fill);
f_void = 0.25;
set_value(controller, "tc_void", f_void);
T_dis_out_min = 500.0;
set_value(controller, "t_dis_out_min", T_dis_out_min);
T_ch_out_max = 400.0;
set_value(controller, "t_ch_out_max", T_ch_out_max);
tc_nodes = 100.0;
set_value(controller, "nodes", tc_nodes);
f_TC_cold = 0.7;
set_value(controller, "f_tc_cold", f_TC_cold);
//***** TOU_schedule is currently set in type 251, but will eventually need to be set in script
// ********* End Controller Parameters ********************

// Set Controller Inputs
connect( weather, "beam", controller, "I_bn" );
connect( receiver, "m_dot_salt_tot", controller, "m_dot_field" );
connect( powerblock, "m_dot_htf_ref", controller, "m_dot_htf_ref" );
connect( receiver, "T_salt_hot", controller, "T_field_out" );
connect( powerblock, "T_htf_cold", controller, "T_pb_out" );
connect( weather, "tdry", controller, "T_amb" );
connect( powerblock, "m_dot_demand", controller, "m_pb_demand" );	//This is input is not used by the controller
connect( receiver, "q_startup", controller, "q_startup" );		// This input is not used by the controller
connect( tou_reader, "tou_value", controller, "TOUPeriod" );
// Set initial values for inputs generated from subsequently called types
set_value( controller, "m_dot_htf_ref", 1.0 );
set_value( controller, "T_pb_out", T_HTF_out_ref ); 
// ******* End Controller Inputs

// Set Powerblock Parameters
set_value(powerblock, "P_ref", P_cycle_design);
set_value(powerblock, "eta_ref", eff_cycle_design);
T_HTF_in_ref = 574.0;
set_value(powerblock, "T_htf_hot_ref", 574);
set_value(powerblock, "T_htf_cold_ref", T_HTF_out_ref);
dT_cooling_ref = 10.0;
set_value(powerblock, "dT_cw_ref", dT_cooling_ref);
T_amb_des = 43.0;
set_value(powerblock, "T_amb_des", 43.0);
set_value(powerblock, "HTF", HTF_field);
set_value(powerblock, "q_sby_frac", F_standby);
P_boiler = 100.0;
set_value(powerblock, "P_boil", P_boiler);
Cool_type = 2;
set_value(powerblock, "CT", Cool_type);
startup_time = 0.5;
set_value(powerblock, "startup_time", startup_time);
startup_frac = 0.5;
set_value(powerblock, "startup_frac", startup_frac);
tech_type = 1;
set_value(powerblock, "tech_type", tech_type);
T_approach = 5.0;
set_value(powerblock, "T_approach", T_approach);
T_ITD_des = 16.0;
set_value(powerblock, "T_ITD_des", T_ITD_des);
P_cond_ratio = 1.0028;
set_value(powerblock, "P_cond_ratio", P_cond_ratio);
pb_bd_frac = 0.02;
set_value(powerblock, "pb_bd_frac", pb_bd_frac);
P_cond_min = 2.0;
set_value(powerblock, "P_cond_min", P_cond_min);
hr_pl_nlev = 8;
set_value(powerblock, "n_pl_inc", hr_pl_nlev);
set_value(powerblock, "F_wc", [0,0,0,0,0,0,0,0,0]);
// **** End Powerblock Parameters ******

// Set Powerblock Inputs
set_value( powerblock, "mode", 2 );		//Always set to 2 for type 251
connect( controller, "T_pb_in", powerblock, "T_htf_hot" );
connect( controller, "m_dot_pb", powerblock, "m_dot_htf" );
connect( weather, "twet", powerblock, "T_wb" );
//set_value( powerblock, "demand_var", 110.0 );		//Don't need to set this?
connect( controller, "standby_control", powerblock, "standby_control" );
connect( weather, "tdry", powerblock, "T_db" );
connect( weather, "pres", powerblock, "P_amb");
connect( weather, "rhum", powerblock, "rh" );
// ***** End Powerblock Inputs *******

// Set Parasitics Parameters
P_storage_pump = 0.0;
piping_loss = 10200;
piping_length = 528.658;
recirc_htr_eff = 1.0;
pb_fixed_par = 0.0055;
bop_par = 0.0;
bop_par_0 = 0.483;
bop_par_1 = 0.571;
bop_par_2 = 0.0;
bop_par_f = 1.0;
aux_par = 0.023;
aux_par_0 = 0.483;
aux_par_1 = 0.571;
aux_par_2 = 0.0;
aux_par_f = 1.0;
storage_bypass = 0.0;
set_value(parasitics, "P_storage_pump", P_storage_pump);
set_value(parasitics, "Piping_loss", piping_loss );
set_value(parasitics, "Piping_length", piping_length );
set_value(parasitics, "Design_power", P_cycle_design );
set_value(parasitics, "recirc_htr_eff", recirc_htr_eff );
set_value(parasitics, "design_eff", eff_cycle_design );
set_value(parasitics, "night_recirc", night_recirc );
set_value(parasitics, "pb_fixed_par", pb_fixed_par );
set_value(parasitics, "aux_par", aux_par );
set_value(parasitics, "aux_par_f", aux_par_f );
set_value(parasitics, "aux_par_0", aux_par_0 );
set_value(parasitics, "aux_par_1", aux_par_1 );
set_value(parasitics, "aux_par_2", aux_par_2 );
set_value(parasitics, "bop_par", bop_par );
set_value(parasitics, "bop_par_f", bop_par_f );
set_value(parasitics, "bop_par_0", bop_par_0 );
set_value(parasitics, "bop_par_1", bop_par_1 );
set_value(parasitics, "bop_par_2", bop_par_2 );
set_value(parasitics, "storage_bypass", storage_bypass );
//**** End Parasitics Parameters ********************

// Set Parasitics Inputs
set_value(parasitics, "flow_from_storage", 0.0);
connect(powerblock, "W_cool_par", parasitics, "P_cooling_tower");
connect(receiver, "W_dot_pump", parasitics, "P_tower_pump");
connect(hel_field, "pparasi", parasitics, "P_helio_track");
connect(powerblock, "P_cycle", parasitics, "P_plant_output");
connect(powerblock, "eta", parasitics, "eta_cycle");
connect(controller, "tank_fp_par", parasitics, "P_cold_tank");
set_value(parasitics, "P_hot_tank", 0.0);	// "tank_fp_par" from controller contains both hot and cold tank htr values
connect(receiver, "q_conv_sum", parasitics, "P_tower_conv");
connect(receiver, "q_rad_sum", parasitics, "P_tower_rad");
set_value(parasitics, "recirc_source", 0.0);
connect(powerblock, "m_dot_htf_ref", parasitics, "ref_htf_flow");
connect(controller, "q_aux_heat", parasitics, "aux_power");
connect(controller, "htf_pump_power", parasitics, "P_htf_pump");

//simulate(1,2000,1,30,false);

simulate(1,8760,1,30,false);