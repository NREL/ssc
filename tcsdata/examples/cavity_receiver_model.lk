clear();

// **** Define tcs directory *******************
//tcs_dir = 'C:/Users/tneises/Documents/Projects/ssc';
// *********************************************

//****** Get SSC directory ********
file_dir = env('SSCDIR')+'/tcsdata/typelib/MS_Cavity_Power_Tower';
//*********************************

//********************************************************************************************
// Pre-processing input files
//Read in field efficiency files
f = open( file_dir+'/eff_array.dat', 'r' );
if( !f )
{
	outln("Could not open file 1 for reading");
	exit;
}

line = 'string';
read_line(f, line);
azimuth = split( line, ',' );
read_line(f, line);
zenith = split( line, ',' );

num_azi = #azimuth;
num_zen = #zenith;
num_sol_pos = num_azi * num_zen;

eta_field_map = alloc( num_sol_pos, 3 );

for( i = 0; i < num_azi; i++ )
	for( j = 0; j < num_zen; j++ )
	{
		eta_field_map[i*num_zen+j][1] = azimuth[i]; 
		eta_field_map[i*num_zen+j][0] = zenith[j];
	}

for( i = 0; i < num_sol_pos; i++ )
{
	read_line(f, eta_field_map[i][2]);
}
close( f );

//***** Read in flux file ********
f = open( file_dir +'/flux_map.csv', 'r' );
if( !f )
{
	outln("Could not open file 2 for reading");
	exit;
}

i = 1;
while( read_line(f, line) )
{
	if( line == ' Azimuth,Zenith' ) 	
		break;
	i++;
	if( i > 200 ) 	
	{
		outln("Flux map is not using recognized formatting. Exiting..");
		exit;
	}
}

num_sol_pos = i - 5;
arr_sol_pos = alloc( 2, num_sol_pos );

close( f );

f = open( file_dir +'/flux_map.csv', 'r' );
if( !f )
{
	outln("Could not open file 2 for reading");
	exit;
}

for( i = 0; i < 4; i++ )
{
	read_line(f, line);
}

// Read and save azimuth and zenith angles
for( i = 0; i < num_sol_pos; i++ )
{
	read_line( f, line );
	parts = split( line, ',' );
	arr_sol_pos[0][i] = parts[2];		// Azimuth 
	arr_sol_pos[1][i] = parts[3];		// Zenith
}

// Read and save flux maps and each solar position [solar position],[flux]
arr_flux = alloc( num_sol_pos, 120 );

for( i = 0; i < 3; i++ )
	read_line(f, line);

for( i = 0; i < num_sol_pos; i++ )
{
	// Reading flux map for i_th solar position: 10 rows, 12 columns
	for( j = 0; j < 10; j++ )
	{
		read_line( f, line );
		parts = split( line, ',' );
		for( k = 0; k < 12; k++ )
		{
			arr_flux[i][(j*12+k)] = parts[k];
		}
	}
	// If there are solar positions remaining, skip blanks rows
	if( i < (num_sol_pos - 1))
	{
		for( l = 0; l < 5; l++ )
		{	
			read_line( f, line );
		}
	}
}

// ******** Read in Time-of-Use file **********
f = open( file_dir + '/touperiod.in', 'r' );
if( !f )
{
	outln("Could not open file 2 for reading");
	exit;
}
read_line(f, line);

tou_week = alloc( 12, 24 );
tou_end = alloc( 12, 24 );

for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[1-1][j]);
	out(tou_week[1-1][j]);
}
outln();

for( i = 2; i < 6; i++ )
{	
	for( j = 0; j < 24; j++ )
	{
		read_line(f, line);
	}
}

// Jan 6th - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[1-1][j]);
	out(tou_end[1-1][j]);
}
outln();
outln();

// Jan 7th -31st Wednesday
for( j = 7; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Feb 1st Thursday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[2-1][j]);
	out(tou_week[2-1][j]);
}
outln();

// Feb 2nd Friday
for( j = 0; j < 1; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Feb 3rd - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[2-1][j]);
	out(tou_end[2-1][j]);
}
outln();
outln();

// Feb 4th - 28th - Wednesday
for( j = 4; j < 29; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Mar 1 - Thursday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[3-1][j]);
	out(tou_week[3-1][j]);
}
outln();

// Feb 2nd Friday
for( j = 0; j < 1; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Mar 3rd - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[3-1][j]);
	out(tou_end[3-1][j]);
}
outln();
outln();

// Mar 4th - 31st - Saturday
for( j = 4; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Apr 1st - Sunday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[4-1][j]);
	out(tou_end[4-1][j]);
}
outln();

// Apr 2nd - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[4-1][j]);
	out(tou_week[4-1][j]);
}
outln();
outln();

// Apr 3rd - 30th - Monday
for( j = 3; j < 31; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// May 1st - Tuesday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[5-1][j]);
	out(tou_week[5-1][j]);
}
outln();

// May 2nd - 4th - Friday
for( j = 2; j < 5; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// May 5th - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[5-1][j]);
	out(tou_end[5-1][j]);
}
outln();
outln();

// May 6th - May 31st - Thursday
for( j = 6; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// June 1st - Friday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[6-1][j]);
	out(tou_week[6-1][j]);
}
outln();

// June 2nd - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[6-1][j]);
	out(tou_end[6-1][j]);
}
outln();
outln();

// June 3rd - June 30th - Saturday
for( j = 3; j < 31; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// July 1st - Sunday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[7-1][j]);
	out(tou_end[7-1][j]);
}
outln();

// July 2nd - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[7-1][j]);
	out(tou_week[7-1][j]);
}
outln();
outln();

// July 3rd - July 31st - Tuesday
for( j = 3; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Aug 1 - Wednesday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[8-1][j]);
	out(tou_week[8-1][j]);
}
outln();

// Augst 2 - 3 Friday
for( j = 2; j < 4; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// August 4th - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[8-1][j]);
	out(tou_end[8-1][j]);
}
outln();
outln();

// Augst 5 - 31 Friday
for( j = 5; j < 32; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Sep 1 - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[9-1][j]);
	out(tou_end[9-1][j]);
}
outln();

// Sep 2 - Sunday
for( j = 2; j < 3; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Sep 3 - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[9-1][j]);
	out(tou_week[9-1][j]);
}
outln();
outln();

// Sep 4 - 30 Sunday
for( j = 4; j < 31; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Oct 1 - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[10-1][j]);
	out(tou_week[10-1][j]);
}
outln();

// Oct 2 - 5 - Friday
for( j = 2; j < 6; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Oct 6 - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[10-1][j]);
	out(tou_end[10-1][j]);
}
outln();
outln();

// Oct 7 - 31 - Wednesday + Thursday
for( j = 7; j < 32+1; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Nov 2 - Friday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[11-1][j]);
	out(tou_week[11-1][j]);
}
outln();

// Nov 3 - Saturday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[11-1][j]);
	out(tou_end[11-1][j]);
}
outln();
outln();

// Nov 4 - Nov 30 Friday + Saturday
for( j = 4; j < 31+1; j++ )
{
	for( i = 0; i < 24; i++ )
	{
		read_line(f, line);
	}
}

// Dec 2 - Sunday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_end[12-1][j]);
	out(tou_end[12-1][j]);
}
outln();

// Dec 3 - Monday
for( j = 0; j < 24; j++ )
{
	read_line(f, tou_week[12-1][j]);
	out(tou_week[12-1][j]);
}
outln();

//********************************************************************************************
//********************************************************************************************
// Set up simulation

debug_mode = true;

//Add weather file reader unit
if(debug_mode) weather = add_unit("trnsys_weatherreader");
else weather = add_unit("weatherreader");

if(debug_mode)
{
	file_loc = env('SSCDIR') + '/tcsdata/typelib/TRNSYS_weather_outputs/daggett_trnsys_weather.out';
	set_value( weather, "file_name", file_loc );
	set_value( weather, "i_hour", "TIME" );
	set_value( weather, "i_month", "month" );
	set_value( weather, "i_day", "day" );
	set_value( weather, "i_global", "GlobalHorizontal" );
	set_value( weather, "i_beam", "DNI" );
	set_value( weather, "i_diff", "DiffuseHorizontal" );
	set_value( weather, "i_tdry", "T_dry" );
	set_value( weather, "i_twet", "T_wet" );
	set_value( weather, "i_tdew", "T_dew" );
	set_value( weather, "i_wspd", "WindSpeed" );
	set_value( weather, "i_wdir", "WindDir" );
	set_value( weather, "i_rhum", "RelHum" );
	set_value( weather, "i_pres", "AtmPres" );
	set_value( weather, "i_snow", "SnowCover" );
	set_value( weather, "i_albedo", "GroundAlbedo" );
	set_value( weather, "i_poa", "POA" );
	set_value( weather, "i_solazi", "Azimuth" );
	set_value( weather, "i_solzen", "Zenith" );
	set_value( weather, "i_lat", "Latitude" );
	set_value( weather, "i_lon", "Longitude" );
	set_value( weather, "i_shift", "Shift" );
}
else
{
	//Set weather parameters
	weather_file = "C:/SAM/2013.1.15/exelib/climate_files/CA Daggett.tm2";
	//if (ostype() == 'osx64') weather_file = '/Users/adobos/Projects/ssc/examples/daggett.tm2';

	set_value(weather, "file_name", weather_file);
	set_value(weather, "track_mode", 1);
	set_value(weather, "tilt", 0);
	set_value(weather, "azimuth", 0);
}

// Parameters from "trnsys.tower.SV-mod.trd"
//*********************** HELIOSTAT FIELD PAGE **********************
num_zen = 8;
num_azi = 13;
num_helio = 6235;
wind_stow_speed = 15;
h_helio = 12.2;
w_helio = 12.2;
Hel_dens = 0.97;
hel_stow_deploy = 8;
field_angle = 60;
//*********************** RECEIVER/TOWER FIELD PAGE **********************
is_north = 1;
num_panels = 20;
d_rec = 15.11;
h_rec = 28.743;
H_lip = 3.09;
Rec_d_spec = 28;
h_tower = 287.91;
d_tube = 40;
th_tube = 1.25;
Material = 2;
HTF = 17;
flow_pattern = 6;
HTF_rec_out = 574;
HTF_max_inlet = 350;
Rec_HTF_max_flow = 5.76746e+006;
Rec_coating_abs = 0.65;
epsilon = 0.88;
night_recirc = 0;
recirc_htr_eff = 1;
nazm = 12;
nrad = 12;
Plant_lattitude = 34.8667;
f_rec_min = 0.25;
Q_rec_des = 514.118;
rec_su_delay = 0.2;
rec_qf_delay = 0.25;
//****************Power Block page****************
tech_type = 1;
LU_pb = 65;
P_cycle_design = 115;
Eff_cycle_design = 0.425;
T_HTF_in_ref = 574;
T_HTF_out_ref = 290;
P_boiler = 100;
Cycle_min_inlet_temp = 500;
T_standby = 2;
F_standby = 0.2;
startup_time = 0.5;
startup_frac = 0.5;
hl_ffact = 1;
cycle_cutoff_frac = 0.25;
cycle_max_fraction = 1.05;
LHV_eff = 0.9;
T_amb_des = 20;
dT_cooling_ref = 10;
Cool_type = 1;
T_approach = 5;
T_ITD_des = 16;
P_cond_ratio = 1.0028;
pb_bd_frac = 0.02;
min_cond_pres = 1.25;
hr_pl_nlev = 2;
//****************Thermal storage page****************
fossil_mode = 1;
storage_bypass = 0;
Is_two_tank = 1;
V_tank_tot = 7553.18;
h_tank = 20;
h_tank_min = 1;
h_tank_wetted = 0.4;
h_tank_dry = 0.25;
T_store_hot_initial = 574;
T_store_cold_initial = 290;
V_store_hot_initial = 2265.95;
V_store_cold_initial = 5287.23;
tank_pairs = 1;
T_htr_ctank= 280;
T_htr_htank= 500;
Q_max_ctank= 30;
Q_max_htank= 30;
eta_tank_htr= 0.99;
TC_Fill = 8;
f_TC_cold = 0.7;
f_void = 0.25;
tc_nodes = 100;
T_dis_out_min = 500;
T_ch_out_max = 400;
TSHOURS = 6;
NUMTOU = 9;
TSLOGICT = 0;
TSLOGIC1 = 0;
TSLOGIC2 = 1.05;
TSLOGIC3 = 0;
TSLOGIC4 = 0;
TSLOGIC5 = 1;
TSLOGIC6 = 0;
TSLOGIC7 = 0;
TSLOGIC8 = 1;
TSLOGIC9 = 0;
TSLOGI10 = 0;
TSLOGI11 = 1;
TSLOGI12 = 0;
TSLOGI13 = 0;
TSLOGI14 = 1;
TSLOGI15 = 0;
TSLOGI16 = 0;
TSLOGI17 = 1;
TSLOGI18 = 0;
TSLOGI19 = 0;
TSLOGI20 = 1;
TSLOGI21 = 0;
TSLOGI22 = 0;
TSLOGI23 = 1;
TSLOGI24 = 0;
TSLOGI25 = 0;
TSLOGI26 = 1;
FOSSILFI = 0;
FOSSILF1 = 0;
FOSSILF2 = 0;
FOSSILF3 = 0;
FOSSILF4 = 0;
FOSSILF5 = 0;
FOSSILF6 = 0;
FOSSILF7 = 0;
FOSSILF8 = 0;
HC_LOGIC0 = 0;
HC_LOGIC1 = 0;
HC_LOGIC2 = 0;
HC_LOGIC3 = 0;
HC_LOGIC4 = 0;
HC_LOGIC5 = 0;
HC_LOGIC6 = 0;
HC_LOGIC7 = 0;
HC_LOGIC8 = 0;
//****************Parasitics page****************
P_hel_start = 0.025;
P_hel_track = 0.055;
eta_rec_pump = 0.85;
PB_pump_coef = 0.55;
TES_pump_coef = 0.15;
piping_loss = 10200;
piping_length = 748.566;
aux_par_0 = 0.483;
aux_par_1 = 0.571;
aux_par_2 = 0;
aux_par_f = 1;
aux_par = 0.023;
bop_par_0 = 0.483;
bop_par_1 = 0.571;
bop_par_2 = 0;
bop_par_f = 1;
bop_par = 0;
pb_fixed_par = 0.0055;
//************** End of .trd Parameters***************
//****************************************************
//*******************************************************

tou_reader = add_unit("tou_translator");

set_value( tou_reader, "weekday_schedule", tou_week );
set_value( tou_reader, "weekend_schedule", tou_end );

hel_field = add_unit("sam_mw_pt_type221");
cav_rec = add_unit("sam_lf_st_pt_type232");
controller = add_unit("sam_mw_trough_type251");
powerblock = add_unit("sam_mw_pt_type224");
parasitics = add_unit("sam_mw_pt_type228");

// Set heliostat field parameters
set_value( hel_field, "eta_map", eta_field_map );
set_value( hel_field, "n_zen", num_zen );
set_value( hel_field, "n_azi", num_azi );
set_value( hel_field, "n_hel", num_helio );
set_value( hel_field, "q_start", P_hel_start );
set_value( hel_field, "p_run", P_hel_track );
set_value( hel_field, "v_wind_max", wind_stow_speed );
set_value( hel_field, "hel_stow_deploy", hel_stow_deploy );

// Set heliostat field inputs
connect( weather, "wspd", hel_field, "vwind" );
connect( weather, "solzen", hel_field, "theta" );
connect( weather, "solazi", hel_field, "phi" );
connect( controller, "defocus", hel_field, "field_control" );
// Set initial values for inputs
set_value( hel_field, "vwind", 0.0 );
set_value( hel_field, "theta", 1.0 );
set_value( hel_field, "phi", 90.0 );
set_value( hel_field, "field_control", 0.0 );

// TRD cavity "Equations"
recangle = 180.0;
P_htf = 1;
lambda_step = 4;
e_solar = 1;
e_thermal = 1;
e_solar_p = 1;
e_thermal_p = 1;
h_Type = 2.0;
h_Model = 2.0;
forced_convection = 0.0;
h_wind_measurement = 10;
wind_direct_depend = 0;
N_band = 2;

// Set cavity receiver parameters
set_value(cav_rec, "rec_d_spec", Rec_d_spec); 
set_value(cav_rec, "h_rec", h_rec);
set_value(cav_rec, "h_lip", H_lip);
set_value(cav_rec, "h_tower", h_tower);
set_value(cav_rec, "rec_angle", recangle); 
set_value(cav_rec, "d_tube_out", d_tube);
set_value(cav_rec, "th_tube", th_tube);
set_value(cav_rec, "eta_pump", eta_rec_pump);
set_value(cav_rec, "hel_stow", hel_stow_deploy); 
set_value(cav_rec, "flow_pattern", flow_pattern);
set_value(cav_rec, "htf", HTF);
set_value(cav_rec, "field_fl_props", [0]);
set_value(cav_rec, "material", Material);
set_value(cav_rec, "hl_ffact", hl_ffact);
set_value(cav_rec, "T_htf_hot_des", HTF_rec_out);
set_value(cav_rec, "T_htf_cold_des", T_HTF_out_ref);
set_value(cav_rec, "f_rec_min", f_rec_min);
set_value(cav_rec, "q_rec_des", Q_rec_des);
set_value(cav_rec, "rec_su_delay", rec_su_delay);
set_value(cav_rec, "rec_qf_delay", rec_qf_delay);
set_value(cav_rec, "conv_model", h_Model);
set_value(cav_rec, "m_dot_htf_max", Rec_HTF_max_flow);
set_value(cav_rec, "eps_wavelength", [[4, e_solar, e_solar_p], [100,e_thermal,e_thermal_p]]);
set_value(cav_rec, "conv_coupled", h_Type);
set_value(cav_rec, "conv_forced", forced_convection);
set_value(cav_rec, "h_wind_meas", h_wind_measurement);
set_value(cav_rec, "conv_wind_dir", wind_direct_depend);
set_value(cav_rec, "fluxmap_angles", arr_sol_pos);
set_value(cav_rec, "fluxmap", arr_flux);

// Set cavity receiver inputs
connect( weather, "solazi", cav_rec, "azimuth" );
connect( weather, "solzen", cav_rec, "zenith" );
set_value( cav_rec, "T_htf_hot", HTF_rec_out );
connect( controller, "T_field_in", cav_rec, "T_htf_cold" );
set_value( cav_rec, "P_htf", P_htf );
connect( weather, "pres", cav_rec, "P_amb" );
//connect( weather, "hour", cav_rec, "hour" );
connect( weather, "tdew", cav_rec, "T_dp" );
connect( weather, "beam", cav_rec, "I_bn" );
connect( hel_field, "eta_field", cav_rec, "eta_field" );
connect(weather, "tdry", cav_rec, "T_amb");
connect(weather, "wspd", cav_rec, "u_wind");
connect(weather, "wdir", cav_rec, "deg_wind");
// Set initial values for inputs
set_value( cav_rec, "azimuth", 0.0 );
set_value( cav_rec, "zenith", 0.0 );
set_value( cav_rec, "T_htf_cold", 290 );
set_value( cav_rec, "P_amb", 0.9435 );
//set_value( cav_rec, "hour", 0.0 );
set_value( cav_rec, "T_dp", 0.0 );
set_value( cav_rec, "I_bn", 0.0 );
set_value( cav_rec, "eta_field", 0.0 );
set_value( cav_rec, "T_amb", 15.0 );
set_value( cav_rec, "u_wind", 0.0 );
set_value( cav_rec, "deg_wind", 0.0 );

// TRD controller "Equations"
q_pb_design = P_cycle_design/Eff_cycle_design;
T_set_aux = T_HTF_in_ref;
h_tank_max = h_tank - h_tank_min;
solarm = Q_rec_des*Eff_cycle_design/P_cycle_design;
I_bn_des = 950.0;
fc_on = 0;
is_hx = 0;
dT_hot = 0;
dT_cold = 0;
hx_config = 0;
SF_type = 2;

// Set controller parameters
set_value(controller, "field_fluid", HTF); 
set_value(controller, "field_fl_props", [0]);
set_value(controller, "store_fluid", HTF);
set_value(controller, "user_fluid", [0]);
set_value(controller, "tshours", TSHOURS);
set_value(controller, "is_hx", is_hx);
set_value(controller, "dt_hot", dT_hot);
set_value(controller, "dt_cold", dT_cold);
set_value(controller, "hx_config", hx_config);
set_value(controller, "q_max_aux", q_pb_design);
set_value(controller, "T_set_aux", T_set_aux);
set_value(controller, "V_tank_hot_ini", V_store_hot_initial);
set_value(controller, "T_tank_hot_ini", T_store_hot_initial);
set_value(controller, "T_tank_cold_ini", T_store_cold_initial);
set_value(controller, "vol_tank", V_tank_tot);
set_value(controller, "h_tank", h_tank);
set_value(controller, "h_tank_min", h_tank_min);
set_value(controller, "u_tank", h_tank_wetted);
set_value(controller, "tank_pairs", tank_pairs);
set_value(controller, "cold_tank_Thtr", T_htr_ctank);
set_value(controller, "hot_tank_Thtr", T_htr_htank);
set_value(controller, "tank_max_heat", Q_max_htank);
set_value(controller, "T_field_in_des", T_HTF_out_ref);
set_value(controller, "T_field_out_des", HTF_rec_out);
set_value(controller, "q_pb_design", q_pb_design);
set_value(controller, "W_pb_design", P_cycle_design);
set_value(controller, "cycle_max_frac", cycle_max_fraction);
set_value(controller, "cycle_cutoff_frac", cycle_cutoff_frac);
set_value(controller, "solarm", solarm);
set_value(controller, "pb_pump_coef", PB_pump_coef);
set_value(controller, "tes_pump_coef", TES_pump_coef);
set_value(controller, "pb_fixed_par", 0.0);
set_value(controller, "bop_array", [0,0,0.0,0.0,0]);
set_value(controller, "aux_array", [0.0,0.0,0.0,0.0,0.0]);
set_value(controller, "T_startup", Cycle_min_inlet_temp);
set_value(controller, "fossil_mode", fossil_mode);
set_value(controller, "fthr_ok", 1);
set_value(controller, "nSCA", 1);
set_value(controller, "I_bn_des", 950);
set_value(controller, "fc_on", fc_on);
set_value(controller, "q_sby_frac", F_standby);
set_value(controller, "t_standby_reset", T_standby);
set_value(controller, "sf_type", SF_type);
set_value(controller, "tes_type", Is_two_tank);
set_value(controller, "tslogic_a", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tslogic_b", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tslogic_c", [1,1,1,1,1,1,1,1,1]);
set_value(controller, "ffrac", [FOSSILFI,FOSSILF1,FOSSILF2,FOSSILF3,FOSSILF4,FOSSILF5,FOSSILF6,FOSSILF7,FOSSILF8]);
set_value(controller, "tc_fill", TC_Fill);
set_value(controller, "tc_void", f_void);
set_value(controller, "t_dis_out_min", T_dis_out_min);
set_value(controller, "t_ch_out_max", T_ch_out_max);
set_value(controller, "nodes", tc_nodes);
set_value(controller, "f_tc_cold", f_TC_cold);
//***** TOU_schedule is currently set in type 251, but will eventually need to be set in script

// Set controller inputs
connect( weather, "beam", controller, "I_bn" );
connect( cav_rec, "m_htf_total", controller, "m_dot_field" );
connect( powerblock, "m_dot_htf_ref", controller, "m_dot_htf_ref" );
connect( cav_rec, "T_htf_hot_out", controller, "T_field_out" );
connect( powerblock, "T_htf_cold", controller, "T_pb_out" );
connect( weather, "tdry", controller, "T_amb" );
connect( powerblock, "m_dot_demand", controller, "m_pb_demand" );
connect( cav_rec, "Q_startup", controller, "q_startup" );
connect( tou_reader, "tou_value", controller, "TOUPeriod" );
//******* "dnifc" forecasted DNI is an input, use default for now
// Set initial values for inputs
set_value( controller, "I_bn", 0.0 );
set_value( controller, "m_dot_field", 0.0 );
set_value( controller, "m_dot_htf_ref", 1.0 );
set_value( controller, "T_field_out", HTF_rec_out );
set_value( controller, "T_pb_out", T_HTF_out_ref );
set_value( controller, "T_amb", 15.0 );
set_value( controller, "m_pb_demand", 100000.0 );
set_value( controller, "q_startup", 0.0 );
//******* initialize "dnifc"

// Set powerblock parameters
set_value(powerblock, "P_ref", P_cycle_design);
set_value(powerblock, "eta_ref", Eff_cycle_design);
set_value(powerblock, "T_htf_hot_ref", T_HTF_in_ref);
set_value(powerblock, "T_htf_cold_ref", T_HTF_out_ref);
set_value(powerblock, "dT_cw_ref", dT_cooling_ref);
set_value(powerblock, "T_amb_des", T_amb_des);
set_value(powerblock, "HTF", HTF);
set_value(powerblock, "q_sby_frac", F_standby);
set_value(powerblock, "P_boil", P_boiler);
set_value(powerblock, "CT", Cool_type);
set_value(powerblock, "startup_time", startup_time);
set_value(powerblock, "startup_frac", startup_frac);
set_value(powerblock, "tech_type", tech_type);
set_value(powerblock, "T_approach", T_approach);
set_value(powerblock, "T_ITD_des", T_ITD_des);
set_value(powerblock, "P_cond_ratio", P_cond_ratio);
set_value(powerblock, "pb_bd_frac", pb_bd_frac);
set_value(powerblock, "P_cond_min", min_cond_pres);
set_value(powerblock, "n_pl_inc", hr_pl_nlev);
set_value(powerblock, "F_wc", [HC_LOGIC0,HC_LOGIC1,HC_LOGIC2,HC_LOGIC3,HC_LOGIC4,HC_LOGIC5,HC_LOGIC6,HC_LOGIC7,HC_LOGIC8]);

// Set powerblock inputs
set_value( powerblock, "mode", 2 );	//Always set to 2 for type 251
connect( controller, "T_pb_in", powerblock, "T_htf_hot" );
connect( controller, "m_dot_pb", powerblock, "m_dot_htf" );
connect( weather, "twet", powerblock, "T_wb" );
set_value( powerblock, "demand_var", 110.0 );
connect( controller, "standby_control", powerblock, "standby_control" );
connect( weather, "tdry", powerblock, "T_db" );
connect( weather, "pres", powerblock, "P_amb" );
set_value( powerblock, "TOU", 1.0 );
connect( weather, "rhum", powerblock, "rh" );
// Set initial values for inputs
set_value( powerblock, "T_htf_hot", HTF_rec_out );
set_value( powerblock, "m_dot_htf", 0.0 );
set_value( powerblock, "T_wb", 12.8 );
set_value( powerblock, "standby_control", 0.0 );
set_value( powerblock, "T_db", 12.8 );
set_value( powerblock, "rh", 0.25 );

set_value(parasitics, "P_storage_pump", 0.0);
set_value(parasitics, "Piping_loss", piping_loss );
set_value(parasitics, "Piping_length", piping_length );
set_value(parasitics, "Design_power", P_cycle_design );
set_value(parasitics, "recirc_htr_eff", recirc_htr_eff );
set_value(parasitics, "design_eff", Eff_cycle_design );
set_value(parasitics, "night_recirc", night_recirc );
set_value(parasitics, "pb_fixed_par", pb_fixed_par );
set_value(parasitics, "aux_par", aux_par );
set_value(parasitics, "aux_par_f", aux_par_f );
set_value(parasitics, "aux_par_0", aux_par_0 );
set_value(parasitics, "aux_par_1", aux_par_1 );
set_value(parasitics, "aux_par_2", aux_par_2 );
set_value(parasitics, "bop_par", bop_par );
set_value(parasitics, "bop_par_f", bop_par_f );
set_value(parasitics, "bop_par_0", bop_par_0 );
set_value(parasitics, "bop_par_1", bop_par_1 );
set_value(parasitics, "bop_par_2", bop_par_2 );
set_value(parasitics, "storage_bypass", storage_bypass );
//**** End Parasitics Parameters ********************

// Set Parasitics Inputs
set_value(parasitics, "flow_from_storage", 0.0);
connect(powerblock, "W_cool_par", parasitics, "P_cooling_tower");
connect(cav_rec, "W_pump", parasitics, "P_tower_pump");
connect(hel_field, "pparasi", parasitics, "P_helio_track");
connect(powerblock, "P_cycle", parasitics, "P_plant_output");
connect(powerblock, "eta", parasitics, "eta_cycle");
connect(controller, "tank_fp_par", parasitics, "P_cold_tank");
set_value(parasitics, "P_hot_tank", 0.0);	// "tank_fp_par" from controller contains both hot and cold tank htr values
connect(cav_rec, "Q_conv_loss", parasitics, "P_tower_conv");
connect(cav_rec, "Q_rad_loss", parasitics, "P_tower_rad");
set_value(parasitics, "recirc_source", 0.0);
connect(powerblock, "m_dot_htf_ref", parasitics, "ref_htf_flow");
connect(controller, "q_aux_heat", parasitics, "aux_power");
connect(controller, "htf_pump_power", parasitics, "P_htf_pump"); 

simulate(1,8760,1,30,false);
//simulate(1.0, 1000.0, 1.0);
