clear();

/*
This script simulates a generic solar system plant using type 260.
Please direct questions to mike.wagner@nrel.gov

This script calculates input values typically generated by the SAM interface.
*/

//#############################################################################
//				SET SIMULATION PARAMETERS HERE 
//#############################################################################
hr_start = 1;
hr_end = 8760;
weather_file = "C:/SAM/2013.1.15/exelib/climate_files/AZ Tucson.tm2";

//plant sizing
w_gr_des = 110.;		//[MWe]	Net electric output at design
f_gr_to_net = 0.91;		//[-]	Gross-to-net conversion estimate
eta_cycle_des = 0.35;	//[%]	Rated cycle conversion efficiency
solarm = 2.0;				//[-]	Solar multiple
hrs_tes = 6.;			//[hr]	Hours of thermal storage

//Operating specs
T_sfdes = 25.;		//[C]	Solar field ambient temperature at design
irr_des = 950.;		//[W/m2] Design point DNI

//Optical parameters
interp_array = 1;		//Flag indicating whether array is interpolated (=1) or nearest (=0)
rad_type = 1;			//Type of irradiation to base incident power on (1=DNI, 2=horiz. beam, 3=GHI)
optical_efficiency_file = "GSS_opt_eff_data.csv";  //Optical efficiency file location
eta_design = 0.8;			//Design-point optical efficiency value (from table -- this is a TCS workaround) 
eta_opt_soil = 0.95;		//[-] Additional reflectivity loss due to soiling on the mirrors
eta_opt_gen = 0.99;		//All other fixed losses.


//Heat loss parameters
f_sfhl_ref = 0.071591; 		//[MWt/MWtcap]  Thermal loss fraction at design

//Parasitics
f_Wpar_fixed = 0.0055;		//Mwe/MWcap  Fixed parasitic load
f_Wpar_prod = 0.08; 		//MWe/MWe  Production-based parasitic


// 				End Simulation parameters 
//#############################################################################











//----------- INTERFACE CALCULATIONS ------------------------------
w_net_des = w_gr_des*f_gr_to_net;	//[MWe]	Estimated net cycle power output
outln("Net cycle output estimate: ",w_net_des, "[MWe]");
q_sf = w_gr_des/eta_cycle_des*solarm;		//[MWt]	Rated solar field output
outln("Solar field rated thermal power: ",q_sf,"[MWt]");
q_cycle_des = q_sf/solarm;				//[MWt] Design point power cycle thermal power requirement

//estimate optical efficiency at design. 
eta_opt_tot = eta_design * eta_opt_soil * eta_opt_gen;
outln("Total solar field optical efficiency: ",eta_opt_tot);

//estimate thermal efficiency at design.
eta_rec = 1.-f_sfhl_ref;
q_sfhl_des = q_sf * f_sfhl_ref;		//MWt design-point solar field thermal loss
outln("Design-point thermal losses: ",q_sfhl_des,"[MWt]");

//Calculate the equivalent solar field aperture area
A_sf = (q_sf + q_sfhl_des)/eta_opt_tot*1e6/irr_des;		//m2
outln("Solar field aperture area [m2]: ",A_sf);

	
//Calculate storage thermal size
E_tes_max = w_gr_des/eta_cycle_des*hrs_tes;

//-----------------------------------------------------------------


//Add weather file reader unit
weather = add_unit("weatherreader");
//Add the solar field collector unit
gss = add_unit("sam_mw_gen_type260");

//Load the optical efficiency file
data = read_text_file(optical_efficiency_file);
outln("Optical efficiency file: ",optical_efficiency_file);
lines = split(data, '\n');
nrow = #lines;
line = split(lines[0], ',');
ncol = #line;
opt_data = alloc(nrow, ncol);
for(i=0; i<nrow; i++)
{
	line = split(lines[i], ',');
	for(j=0; j<ncol; j++)
	{
		opt_data[i][j] = to_real(line[j]);
	}
}

set_value(gss, "OpticalTable", opt_data);

//--

//Set weather parameters
set_value(weather, "file_name", weather_file);
set_value(weather, "track_mode", 0);				// Need POA irradiance for horizontal plane
set_value(weather, "tilt", 0);
set_value(weather, "azimuth", 0);


//Set parameters
set_value(gss, "latitude", 35);
set_value(gss, "longitude", -117);
set_value(gss, "timezone", -8);
set_value(gss, "theta_stow", 170);
set_value(gss, "theta_dep", 10);
set_value(gss, "interp_arr", 1);
set_value(gss, "rad_type", 1);
set_value(gss, "solarm", solarm);
set_value(gss, "T_sfdes", T_sfdes);
set_value(gss, "irr_des", irr_des);
set_value(gss, "eta_opt_soil", eta_opt_soil);
set_value(gss, "eta_opt_gen", eta_opt_gen);
set_value(gss, "f_sfhl_ref", f_sfhl_ref);
set_value(gss, "sfhlQ_coefs", [1,-0.1,0,0]);
set_value(gss, "sfhlT_coefs", [1,0.005,0,0]);
set_value(gss, "sfhlV_coefs", [1,0.01,0,0]);
set_value(gss, "qsf_des", q_sf);
set_value(gss, "w_des", w_gr_des);
set_value(gss, "eta_des", eta_cycle_des);
set_value(gss, "f_wmax", 1.05);
set_value(gss, "f_wmin", 0.25);
set_value(gss, "f_startup", 0.2);
set_value(gss, "eta_lhv", 0.9);
set_value(gss, "etaQ_coefs", [0.9,0.1,0,0,0]);
set_value(gss, "etaT_coefs", [1,-0.002,0,0,0]);
set_value(gss, "T_pcdes", 21);
set_value(gss, "PC_T_corr", 1);
set_value(gss, "f_Wpar_fixed", f_Wpar_fixed);
set_value(gss, "f_Wpar_prod", f_Wpar_prod);
set_value(gss, "Wpar_prodQ_coefs", [1,0,0,0]);
set_value(gss, "Wpar_prodT_coefs", [1,0,0,0]);
set_value(gss, "hrs_tes", hrs_tes);
set_value(gss, "f_charge", 0.98);
set_value(gss, "f_disch", 0.98);
set_value(gss, "f_etes_0", 0.1);
set_value(gss, "f_teshl_ref", 0.35);
set_value(gss, "teshlX_coefs", [1,0,0,0]);
set_value(gss, "teshlT_coefs", [1,0,0,0]);
set_value(gss, "ntod", 9);
set_value(gss, "disws", [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]);
set_value(gss, "diswos", [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]);
set_value(gss, "qdisp", [1,1,1,1,1,1,1,1,1]);
set_value(gss, "fdisp", [0,0,0,0,0,0,0,0,0]);


//Set the initial values
set_value(gss, "ibn", 0.);	//Beam-normal (DNI) irradiation
set_value(gss, "ibh", 0.);	//	Beam-horizontal irradiation
set_value(gss, "itoth", 0.);	//	Total horizontal irradiation
set_value(gss, "tdb", 15.);	//	Ambient dry-bulb temperature
set_value(gss, "twb", 10.);	//	Ambient wet-bulb temperature
set_value(gss, "vwind", 1.);	//	Wind velocity

//Set the inputs
connect(weather, "beam", gss, "ibn");
connect(weather, "global", gss, "itoth");
connect(weather, "poa_beam", gss, "ibh");
//no ibh?
connect(weather, "tdry", gss, "tdb");
connect(weather, "twet", gss, "twb");
connect(weather, "wspd", gss, "vwind");
//location
connect(weather, "lat", gss, "latitude");
connect(weather, "lon", gss, "longitude");
connect(weather, "tz", gss, "timezone");


simulate(hr_start,hr_end,1,30,false);

