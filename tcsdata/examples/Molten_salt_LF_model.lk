clear();

/*
This script simulates a molten salt linear fresnel plant using type 262.
Please direct questions to mike.wagner@nrel.gov

This script calculates input values typically generated by the SAM interface.
*/

//#############################################################################
//				SET SIMULATION PARAMETERS HERE 
//#############################################################################
hr_start = 1;
hr_end = 8760;
weather_file = "C:/SAM/2013.1.15/exelib/climate_files/AZ Tucson.tm2";

//plant sizing
E_net_des = 100.;		//[MWe]	Net electric output at design
f_gr_to_net = 0.90;		//[-]	Gross-to-net conversion estimate
eta_cycle_des = 0.38;	//[%]	Rated cycle conversion efficiency
SM = 2.3;				//[-]	Solar multiple
TES_hrs = 4.;			//[hr]	Hours of thermal storage

//Operating specs
T_hot_des = 525.;		//[C]	Design-point hot field outlet temperature
T_cold_des = 293.;		//[C]	Design-point cold field inlet temperature
T_startup = 450.;		//[C]	Power block startup temperature
T_amb_des = 25.;		//[C]	Ambient temperature at design
V_wind_des = 4.;		//[m/s]	Design point wind velocity
I_bn_des = 950.;		//[W/m2] Design point DNI
freeze_prot_mode = 2; 	//[-]	1=Electric heat trace, 2=Fossil heat trace

//Collector parameters
ColAz = 0.;				//[deg]	Collector axis azimuthal orientation
nMod = 16;				//number of collector modules per loop
A_aperture = 470.3;		//[m2] 	Aperture area of a single collector module
L_mod = 44.8;			//[m]	Length of a collector module
opt_model = 2;			//Optical model (1=Solar position ; 2=Collector incidence table ; 3 = IAM polys)
opt_des_max = 1.;		//Design-point optical efficiency based on opt_model. (workaround to avoid interpolation here)
reflectivity = 0.935;	//[-] Solar-weighted base mirror reflectivity
Dirt_mirror = 0.95;		//[-] Additional reflectivity loss due to soiling on the mirrors
TrackingError = 1.;
GeomEffects = 1.;
Error = 0.732;			//All other optical losses.

/*
Specify the location of the efficiency file.
This is included in the "examples" directory. If the editor indicates a parsing error,
re-open this script. That action updates the working directory to the folder containing
this script.
*/
if(opt_model == 1){ 	//Data file for the "solar position" option
	optical_efficiency_file = "LF_opt_eff_data.csv";
}
if(opt_model == 2){		//Data file for the "incidence angle" option
	optical_efficiency_file = "LF_opt_eff_ColIAMTable.csv";
}

//Receiver parameters
rec_model = 2;			//Receiver model (1=Polynomial ; 2=Evac tube)
//--> polynomial model inputs
HL_T_coefs = [0.,0.672,0.002556,0.,0.];
HL_w_coefs = [1.,0.,0.,0.,0.];
//--> evac model heat loss estimates
Design_loss = [150,1100,1500,0];	//W/m
HCE_FieldFrac = [0.985,0.01,0.005,0]; //For evac model, indicate the total fraction that each receiver variant represents
alpha_abs = [0.96,0.96,0.8,0];		//Absorber absorptance - by variation
Tau_envelope = [0.963,0.963,1,0];	//Glass envelope transmittance - by variation

//Fluid options:
//17 = NaNO3-KNO3
//18 = Nitrate salt
//20 = Hitec XL
//21 = Therminol vp1
//22 = Hitec
field_fluid = 20;
tes_fluid = field_fluid;
cp_ref = 1501.82.;		//J/kg-K	Reference specific heat capacity - for sizing thermal storage
rho_ref = 1872.49;	//kg/m3		Reference density

// 				End Simulation parameters 
//#############################################################################











//----------- INTERFACE CALCULATIONS ------------------------------
E_gross = E_net_des/f_gr_to_net;	//[MWe]	Gross cycle power output
Qsf = E_gross/eta_cycle_des*SM;		//[MWt]	Rated solar field output
Q_cycle_des = Qsf/SM;				//[MWt] Design point power cycle thermal power requirement

T_hot_fp = T_hot_des - 100.;		//[C]	Minimum temperature in the hot TES tank before heating is applied
T_cold_fp = T_cold_des - 30.;		//[C]	Minimum temperature anywhere before freeze protection is applied

//Estimate max and min mass flow rates in a single loop
m_dot_sf = Qsf*1.e6/(cp_ref*(T_hot_des - T_cold_des));		//[kg/s]

//Is an intermediate TES heat exchanger required?
if( field_fluid == tes_fluid) {	is_hx = 0;	}
else{	is_hx = 1;	}

//estimate optical efficiency at design. 
eta_opt_tot = opt_des_max * reflectivity * TrackingError * GeomEffects * Dirt_mirror * Error;
//estimate thermal efficiency at design.
T_sf_ave = (T_hot_des + T_cold_des)/2.;
dT = T_sf_ave - T_amb_des;
if(rec_model == 1)
{
	//polynomial
	c_hl_t = 0.;
	c_hl_w = 0.;
	for(i=0; i<#HL_T_coefs; i++){
		c_hl_t = c_hl_t + HL_T_coefs[i]*pow(dT,i);
	}
	for(i=0; i<#HL_w_coefs; i++){
		c_hl_w = c_hl_w + HL_w_coefs[i]*pow(V_wind_des, i);
	}
	
	eta_rec = 1.-(c_hl_t*c_hl_w)/(I_bn_des*A_aperture/L_mod);

}
else
{
	//evac. tube model
	hl_t = 0.;
	for(i=0; i<#Design_loss; i++){
		hl_t = hl_t + Design_loss[i]*HCE_FieldFrac[i];
	}
	eta_rec = 1.-hl_t/(I_bn_des*A_aperture/L_mod);
	//modify the optical efficiency
	optmod = 0.;
	for(i=0; i<4; i++)
	{
		optmod = optmod + alpha_abs[i]*Tau_envelope[i]*HCE_FieldFrac[i];
	}
	eta_opt_tot = eta_opt_tot * optmod;
}

//Calculate the number of loops required to just exceed the design outlet power
A_loop = A_aperture * nMod;
Q_loop = A_loop * eta_rec * eta_opt_tot * I_bn_des * 1.e-6;	//MW/Loop
nLoops = ceil(Qsf/Q_loop);

//Estimate max and min mass flow rates in a single loop
m_dot_loop = m_dot_sf/nLoops;
m_dot_max = m_dot_loop*1.2;
m_dot_min = m_dot_loop*0.1;
	
//Calculate storage volume
hx_dt_hot = 0.;		//IF TES HEAT EXCHANGER: the hot-side dT
hx_dt_cold = 0.;	//IF TES HEAT EXCHANGER: the cold-side dT
hx_derate = 1.-(hx_dt_hot + hx_dt_cold)/(T_hot_des - T_cold_des);

TES_tank_vol = TES_hrs*Q_cycle_des*3.6e9/(rho_ref*cp_ref*hx_derate*(T_hot_des - T_cold_des));	//[m3] volume of a single tank
TES_init_vol = TES_tank_vol * 0.2;		//initial storage volume (hot) at the beginning of the simulation
Q_TES_htr = 1.5*TES_tank_vol/1000.;		//use about 1.5 kW/m3 of freeze protection heating capacity for TES

/*
fout = open('guitemp.txt','w');
write_line(fout, to_string(Qsf));
write_line(fout, to_string(rho_ref));
write_line(fout, to_string(cp_ref));
write_line(fout, to_string(hx_derate));
write_line(fout, to_string(TES_tank_vol));
close(fout);
*/
//-----------------------------------------------------------------

//Calculate system costs
site_spec = 20.;  //$/m2
solar_field_spec = 210.;	//$/m2
htf_spec = 80.;		//$/m2
storage_spec = 80.*(393.-290.)/(T_hot_des - T_cold_des);   //$/kWht
plant_spec = 830.; //$/kWe
bop_spec = 110.;	//$/kWe
land_spec = 10000.; //$/acre

Asf = A_loop * nLoops;
E_tes = TES_hrs * Q_cycle_des;


site_cost = site_spec * Asf;
solar_field_cost = solar_field_spec * Asf;
htf_cost = htf_spec * Asf;
storage_cost = storage_spec * E_tes * 1000.;
plant_cost = plant_spec * E_gross * 1000.;
bop_cost = bop_spec * E_gross * 1000.;
land_cost = land_spec * Asf * 1.6 / 4046.86;

fixed_cost = site_cost + solar_field_cost + htf_cost + storage_cost + plant_cost + bop_cost;

outln( sprintf("Land cost: $%m\n--------------", land_cost) );
outln( sprintf("Site cost: $%m", site_cost) );
outln( sprintf("Solar field cost: $%m", solar_field_cost) );
outln( sprintf("HTF system cost: $%m", htf_cost) );
outln( sprintf("Storage cost: $%m", storage_cost) );
outln( sprintf("Plant cost: $%m", plant_cost) );
outln( sprintf("Balance of plant cost: $%m", bop_cost) );
outln( sprintf("---------------\nTotal cost: $%m\n\n", fixed_cost) );

//------------------------------------------------------------------

//Add weather file reader unit
weather = add_unit("weatherreader");
// tou translator
tou_translator = add_unit("tou_translator");
//Add the solar field collector unit
solarfield = add_unit("sam_mw_lf_type262");
//Add the controller unit
controller = add_unit("sam_mw_trough_type251");
//Add the power block unit
powerblock = add_unit("sam_mw_pt_type224");
//E_net calculator
enet = add_unit("sam_mw_csp_SumCalcs");

//Load the optical efficiency file
if(opt_model < 3){
	data = read_text_file(optical_efficiency_file);
	outln(optical_efficiency_file);
	lines = split(data, '\n');
	nrow = #lines;
	line = split(lines[0], ',');
	ncol = #line;
	opt_data = alloc(nrow, ncol);
	for(i=0; i<nrow; i++)
	{
		line = split(lines[i], ',');
		for(j=0; j<ncol; j++)
		{
			opt_data[i][j] = to_real(line[j]);
		}
	}

	
	set_value(solarfield, "OpticalTable", opt_data);
}
//--

//Set weather parameters
set_value(weather, "file_name", weather_file);
set_value(weather, "track_mode", 1);
set_value(weather, "tilt", 0);
set_value(weather, "azimuth", 0);


//Set parameters
set_value(solarfield, "nMod", nMod);
set_value(solarfield, "nRecVar", 4);
set_value(solarfield, "nLoops", nLoops);
set_value(solarfield, "eta_pump", 0.85);
set_value(solarfield, "HDR_rough", 4.57E-05);
set_value(solarfield, "theta_stow", 170);
set_value(solarfield, "theta_dep", 10);
set_value(solarfield, "FieldConfig", 2);
set_value(solarfield, "T_startup", T_startup);
set_value(solarfield, "pb_rated_cap", E_gross);
set_value(solarfield, "m_dot_htfmin", m_dot_min);
set_value(solarfield, "m_dot_htfmax", m_dot_max);
set_value(solarfield, "T_loop_in_des", T_cold_des);
set_value(solarfield, "T_loop_out", T_hot_des);
set_value(solarfield, "Fluid", field_fluid);
set_value(solarfield, "T_field_ini", T_startup);
set_value(solarfield, "T_fp", T_cold_fp);
set_value(solarfield, "I_bn_des", I_bn_des);
set_value(solarfield, "V_hdr_max", 3);
set_value(solarfield, "V_hdr_min", 2);
set_value(solarfield, "Pipe_hl_coef", 0.45);
set_value(solarfield, "SCA_drives_elec", 125);
set_value(solarfield, "fthrok", 1);
set_value(solarfield, "fthrctrl", 2);
set_value(solarfield, "ColAz", ColAz);
set_value(solarfield, "solar_mult", SM);
set_value(solarfield, "mc_bal_hot", 0.2);
set_value(solarfield, "mc_bal_cold", 0.2);
set_value(solarfield, "mc_bal_sca", 4.5);
set_value(solarfield, "opt_model", opt_model);
set_value(solarfield, "A_aperture", A_aperture);
set_value(solarfield, "reflectivity", reflectivity);
set_value(solarfield, "TrackingError", TrackingError);
set_value(solarfield, "GeomEffects", GeomEffects);
set_value(solarfield, "Dirt_mirror", Dirt_mirror);
set_value(solarfield, "Error", Error);
set_value(solarfield, "L_mod", L_mod);
set_value(solarfield, "IAM_T_coefs", [0.9896,0.044,-0.0721,-0.2327,0.]);
set_value(solarfield, "IAM_L_coefs", [1.0031,-0.2259,0.5368,-1.6434,0.7222]);
set_value(solarfield, "rec_model", rec_model);
set_value(solarfield, "HCE_FieldFrac", HCE_FieldFrac);
set_value(solarfield, "D_abs_in", [0.066,0.066,0.066,0.066]);
set_value(solarfield, "D_abs_out", [0.07,0.07,0.07,0.07]);
set_value(solarfield, "D_glass_in", [0.115,0.115,0.115,0.115]);
set_value(solarfield, "D_glass_out", [0.12,0.12,0.12,0.12]);
set_value(solarfield, "D_plug", [0,0,0,0]);
set_value(solarfield, "Flow_type", [1,1,1,1]);
set_value(solarfield, "Rough", [4.50E-05,4.50E-05,4.50E-05,4.50E-05]);
set_value(solarfield, "alpha_env", [0.02,0.02,0,0]);
set_value(solarfield, "epsilon_abs_1", [[100,150,200,250,300,350,400,450,500],
							[0.064,0.0665,0.07,0.0745,0.08,0.0865,0.094,0.1025,0.112]]);
set_value(solarfield, "epsilon_abs_2", [[0],[0.65]]);
set_value(solarfield, "epsilon_abs_3", [[0],[0.65]]);
set_value(solarfield, "epsilon_abs_4", [[0],[0]]);
set_value(solarfield, "alpha_abs", alpha_abs);
set_value(solarfield, "Tau_envelope", Tau_envelope);
set_value(solarfield, "epsilon_glass", [0.86,0.86,1,0]);
set_value(solarfield, "GlazingIntactIn", [1,1,0,1]);
set_value(solarfield, "P_a", [0.0001,750,750,0]);
set_value(solarfield, "AnnulusGas", [27,1,1,27]);
set_value(solarfield, "AbsorberMaterial", [1,1,1,1]);
set_value(solarfield, "Shadowing", [0.96,0.96,0.96,0.963]);
set_value(solarfield, "dirt_env", [0.98,0.98,1,0.98]);
set_value(solarfield, "Design_loss", Design_loss);
set_value(solarfield, "L_mod_spacing", 1);
set_value(solarfield, "L_crossover", 15);
set_value(solarfield, "HL_T_coefs", HL_T_coefs);
set_value(solarfield, "HL_w_coefs", HL_w_coefs);
set_value(solarfield, "DP_nominal", 2.5);
set_value(solarfield, "DP_coefs", [0.,1.,0.,0.]);
set_value(solarfield, "rec_htf_vol", 1);
set_value(solarfield, "T_amb_sf_des", T_amb_des);
set_value(solarfield, "V_wind_des", V_wind_des);


//Set the initial values
set_value(solarfield, "I_b", 0.);
set_value(solarfield, "T_db", 15.);
set_value(solarfield, "V_wind", 1.5);
set_value(solarfield, "P_amb", 1.);
set_value(solarfield, "T_dp", 10.);
set_value(solarfield, "SolarAz", 0.);
set_value(solarfield, "defocus", 1.);
set_value(solarfield, "T_cold_in", 293.);
//Set the inputs
connect(weather, "beam", solarfield, "I_b");
connect(weather, "tdry", solarfield, "T_db");
connect(weather, "wspd", solarfield, "V_wind");
connect(weather, "pres", solarfield, "P_amb");
connect(weather, "tdew", solarfield, "T_dp");
connect(weather, "solazi", solarfield, "SolarAz");
connect(weather, "solzen", solarfield, "SolarZen");
connect(weather, "lat", solarfield, "latitude");
connect(weather, "lon", solarfield, "longitude");
connect(weather, "tz", solarfield, "timezone");
connect(controller, "defocus", solarfield, "defocus");
connect(controller, "T_field_in", solarfield, "T_cold_in");

//Set controller parameters
set_value(controller, "field_fluid", field_fluid); 
set_value(controller, "field_fl_props", [0]);
set_value(controller, "store_fluid", tes_fluid);
set_value(controller, "tshours", TES_hrs);
set_value(controller, "is_hx", is_hx);
set_value(controller, "dt_hot", hx_dt_hot);
set_value(controller, "dt_cold", hx_dt_cold);
set_value(controller, "hx_config", 2);
set_value(controller, "q_max_aux", Qsf);
set_value(controller, "lhv_eff", 0.9);
set_value(controller, "T_set_aux", T_hot_des);
set_value(controller, "V_tank_hot_ini", TES_init_vol);
set_value(controller, "T_tank_hot_ini", T_hot_des);
set_value(controller, "T_tank_cold_ini", T_cold_des);
set_value(controller, "vol_tank", TES_tank_vol);
set_value(controller, "h_tank", 20);
set_value(controller, "h_tank_min", 1);
set_value(controller, "u_tank", 0.4);
set_value(controller, "tank_pairs", 1);
set_value(controller, "cold_tank_Thtr", T_cold_fp);
set_value(controller, "hot_tank_Thtr", T_hot_fp);
set_value(controller, "tank_max_heat", Q_TES_htr);
set_value(controller, "T_field_in_des", T_cold_des);
set_value(controller, "T_field_out_des", T_hot_des);
set_value(controller, "q_pb_design", Q_cycle_des);
set_value(controller, "W_pb_design", E_gross);
set_value(controller, "cycle_max_frac", 1.05);
set_value(controller, "cycle_cutoff_frac", 0.25);
set_value(controller, "solarm", SM);
set_value(controller, "pb_pump_coef", 0.55);
set_value(controller, "tes_pump_coef", 0.15);
set_value(controller, "pb_fixed_par", 0.0055);
set_value(controller, "bop_array", [0,1,0.483,0.517,0]);
set_value(controller, "aux_array", [0.02273,1,0.483,0.517,0]);
set_value(controller, "T_startup", T_sf_ave);
set_value(controller, "fossil_mode", 1);
set_value(controller, "fthr_ok", 1);
set_value(controller, "nSCA", nMod);
set_value(controller, "I_bn_des", I_bn_des);
set_value(controller, "fc_on", 0);
set_value(controller, "q_sby_frac", 0.2);
set_value(controller, "t_standby_reset", 2);
set_value(controller, "tes_type", 1);
set_value(controller, "tslogic_a", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tslogic_b", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tslogic_c", [1.05,1,1,1,1,1,1,1,1]);
set_value(controller, "ffrac", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tc_fill", 7);
set_value(controller, "tc_void", 0.25);
set_value(controller, "t_dis_out_min", 500);
set_value(controller, "t_ch_out_max", 500);
set_value(controller, "nodes", 2000);
set_value(controller, "f_tc_cold", 2);

//for(i=0; i<8760; i++){
//	TOU[i] = '1';
//}
//set_value(controller, "TOU_schedule", TOU);

// update to use tou_translator
set_value(tou_translator, "weekday_schedule", [
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]);
set_value(tou_translator, "weekend_schedule", [
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]);


//Connect weather reader to controller
connect(weather, "beam", controller, "I_bn");
connect(weather, "tdry", controller, "T_amb");
connect(solarfield, "m_dot_avail", controller, "m_dot_field");
connect(powerblock, "m_dot_htf_ref", controller, "m_dot_htf_ref");
connect(solarfield, "T_sys_h", controller, "T_field_out");
connect(powerblock, "T_htf_cold", controller, "T_pb_out"); 
connect(powerblock, "m_dot_demand", controller, "m_pb_demand");
connect(solarfield, "E_bal_startup", controller, "q_startup");
connect(tou_translator,"tou_value",controller,"TOUPeriod");
//Set initial values
set_value(controller, "I_bn", 0.);
set_value(controller, "T_amb", 15.);
set_value(controller, "m_dot_field", 0.);
set_value(controller, "m_dot_htf_ref", 0.);
set_value(controller, "T_field_out", T_hot_des);
set_value(controller, "T_pb_out", T_cold_des);
set_value(controller, "m_pb_demand", 100000.);
set_value(controller, "q_startup", 0.);


//Set the parameters for the power block
set_value(powerblock, "P_ref", E_gross);
set_value(powerblock, "eta_ref", eta_cycle_des);
set_value(powerblock, "T_htf_hot_ref", T_hot_des);
set_value(powerblock, "T_htf_cold_ref", T_cold_des);
set_value(powerblock, "dT_cw_ref", 10);
set_value(powerblock, "T_amb_des", 20);
set_value(powerblock, "HTF", field_fluid);
set_value(powerblock, "q_sby_frac", 0.2);
set_value(powerblock, "P_boil", 100);
set_value(powerblock, "CT", 1);
set_value(powerblock, "startup_time", 0.5);
set_value(powerblock, "startup_frac", 0.2);
set_value(powerblock, "tech_type", 2);
set_value(powerblock, "T_approach", 5);
set_value(powerblock, "T_ITD_des", 16);
set_value(powerblock, "P_cond_ratio", 1.0028);
set_value(powerblock, "pb_bd_frac", 0.02);
set_value(powerblock, "P_cond_min", 1.25);
set_value(powerblock, "n_pl_inc", 2);
set_value(powerblock, "F_wc", [0,0,0,0,0,0,0,0,0]);

//Connect inputs
connect(weather, "twet", powerblock, "T_wb");
connect(weather, "tdry", powerblock, "T_db");
connect(weather, "pres", powerblock, "P_amb");
connect(weather, "rhum", powerblock, "rh");
set_value(powerblock, "mode", 2);	//Always set to 2 for type 251
connect(controller, "T_pb_in", powerblock, "T_htf_hot");
connect(controller, "m_dot_pb", powerblock, "m_dot_htf");
connect(controller, "m_dot_pb", powerblock, "demand_var");
connect(controller, "standby_control", powerblock, "standby_control");
connect(controller, "TOU", powerblock, "TOU");
//Set initial values
set_value(powerblock, "T_wb", 10.);
set_value(powerblock, "T_db", 15.);
set_value(powerblock, "P_amb", 1.);
set_value(powerblock, "rh", 0.25);
set_value(powerblock, "T_htf_hot", T_hot_des);
set_value(powerblock, "m_dot_htf", 0.);
set_value(powerblock, "demand_var", E_gross);
set_value(powerblock, "standby_control", 0);
set_value(powerblock, "TOU", 1);

//Connect the enet calculator to the parasitic values
set_value(enet, "eta_lhv", 0.9);
set_value(enet, "eta_tes_htr", 0.98);
set_value(enet, "fp_mode", freeze_prot_mode);
connect(powerblock, "P_cycle", enet, "W_cycle_gross");
connect(powerblock, "W_cool_par", enet, "W_par_heatrej");
connect(solarfield, "W_dot_pump", enet, "W_par_sf_pump");
connect(controller, "htf_pump_power", enet, "W_par_tes_pump");
connect(controller, "bop_par", enet, "W_par_BOP");
connect(controller, "fixed_par", enet, "W_par_fixed");
connect(solarfield, "track_par_tot", enet, "W_par_tracking");
connect(controller, "aux_par", enet, "W_par_aux_boiler");
connect(controller, "tank_fp_par", enet, "Q_par_tes_fp");
connect(solarfield, "E_fp_tot", enet, "Q_par_sf_fp");
connect(controller, "q_aux_heat", enet, "Q_aux_backup");


simulate(hr_start,hr_end,1,30,true);

