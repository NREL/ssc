clear();

// **** Define tcs directory *******************
tcs_dir = 'C:/Users/tneises/Documents/Projects/ssc/tcsdata/typelib/ISCC/';
// *********************************************

//********************************************************************************************
// Pre-processing input files
//Read in field efficiency files
eff_array_loc = tcs_dir + 'eff_array.dat';
f = open( eff_array_loc, 'r' );

if( !f )
{
	outln("Could not open file for reading");
	exit;
}

line = 'string';
read_line(f, line);
azimuth = split( line, ',' );
read_line(f, line);
zenith = split( line, ',' );

num_azi = #azimuth;
num_zen = #zenith;
num_sol_pos = num_azi * num_zen;

eta_field_map = alloc( num_sol_pos, 3 );

for( i = 0; i < num_azi; i++ )
	for( j = 0; j < num_zen; j++ )
	{
		eta_field_map[i*num_zen+j][1] = azimuth[i]; 
		eta_field_map[i*num_zen+j][0] = zenith[j];
	}

for( i = 0; i < num_sol_pos; i++ )
{
	read_line(f, eta_field_map[i][2]);
}
close( f );

//***** Read in flux file ********
fluxmap_loc = tcs_dir + 'fluxmap.csv';
f = open( fluxmap_loc, 'r' );

if( !f )
{
	outln("Could not open file for reading");
	exit;
}

i = 1;
while( read_line(f, line) )
{
	if( line == ' Azimuth,Zenith' ) 	
		break;
	i++;
	if( i > 200 ) 	
	{
		outln("Flux map is not using recognized formatting. Exiting..");
		exit;
	}
}

num_sol_pos = i - 5;
arr_sol_pos = alloc( 2, num_sol_pos );

close( f );
f = open( fluxmap_loc, 'r' );

for( i = 0; i < 4; i++ )
{
	read_line(f, line);
}

// Read and save azimuth and zenith angles
for( i = 0; i < num_sol_pos; i++ )
{
	read_line( f, line );
	parts = split( line, ',' );
	arr_sol_pos[0][i] = parts[2];		// Azimuth 
	arr_sol_pos[1][i] = parts[3];		// Zenith
}

// Read and save flux maps and each solar position [solar position],[flux]
arr_flux = alloc( num_sol_pos, 12 );

for( i = 0; i < 3; i++ )
	read_line(f, line);

for( i = 0; i < num_sol_pos; i++ )
{
	// Reading flux map for i_th solar position: 1 rows, 12 columns
	read_line(f, line);
	parts = split( line, ',' );
	for( j = 0; j < 12; j++ )
		arr_flux[i][j] = parts[j];
	
	// If there are solar positions remaining, skip blanks rows
	if( i < (num_sol_pos - 1))
	{
		for( l = 0; l < 5; l++ )
		{	
			read_line( f, line );
		}
	}
}
outln( "read in flux map" );
//********************************************************************************************
//********************************************************************************************

// **********************************
// *** Set up Weather Reader ********
// **********************************
weather = add_unit("weatherreader");
weather_file = "C:/SAM/2013.1.15/exelib/climate_files/CA Daggett.tm2";

set_value(weather, "file_name", weather_file);
set_value(weather, "track_mode", 1);
set_value(weather, "tilt", 0);
set_value(weather, "azimuth", 0);

// ********************************
// *** Set up ISCC Component ******
// ********************************
hel_field = add_unit("sam_mw_pt_type221");
receiver = add_unit("sam_mw_pt_type222");
iscc_pb = add_unit("sam_iscc_powerblock");
iscc_parasitics = add_unit("sam_iscc_parasitics");

// From trd
//*********************** HELIOSTAT FIELD PAGE **********************
num_zen = 8;
num_azi = 13;
num_helio = 1693;
wind_stow_speed = 15;
h_helio = 12.2;
w_helio = 12.2;
Hel_dens = 0.97;
hel_stow_deploy = 8;
field_angle = 180;
A_sf = 244427;
P_hel_start = 0.025;
P_hel_track = 0.055;

//*********************** RECEIVER/TOWER FIELD PAGE **********************
is_north = 0;
num_panels = 4;
d_rec = 15;
h_rec = 12;
H_lip = 1.98;
Rec_d_spec = 15;
h_tower = 180;
d_tube = 40;
th_tube = 1.25;
Material = 2;
HTF = 17;
flow_pattern = 1;
HTF_rec_out = 364;
HTF_max_inlet = 325;
Rec_HTF_max_flow = 7.614432e+006;
Rec_coating_abs = 0.94;
epsilon = 0.88;
night_recirc = 0;
recirc_htr_eff = 1;
nazm = 12;
nrad = 12;
Plant_lattitude = 34.8667;
f_rec_min = 0.25;
Q_rec_des = 150;
rec_su_delay = 0.2;
rec_qf_delay = 0.25;
hl_ffact = 1;
T_HTF_out_ref = 318;
P_hel_start = 0.025;
P_hel_track = 0.055;
eta_rec_pump = 0.85;
PB_pump_coef = 0.55;
TES_pump_coef = 0.15;
piping_loss = 10200;
piping_length = 468;
aux_par_0 = 0.483;
aux_par_1 = 0.571;
aux_par_2 = 0;
aux_par_f = 1;
aux_par = 0.023;
bop_par_0 = 0.483;
bop_par_1 = 0.571;
bop_par_2 = 0;
bop_par_f = 1;
bop_par = 0;
pb_fixed_par = 0.0055;

// ISCC-specific inputs
is_iscc = 1;
cycle_config = 1;
hot_side_delta_t = 30;
pinch_point = 10;

// Set heliostat field parameters
set_value( hel_field, "eta_map", eta_field_map );				// Added samwx
set_value( hel_field, "n_zen", num_zen );						// Added samwx
set_value( hel_field, "n_azi", num_azi );						// Added samwx
set_value( hel_field, "n_hel", num_helio );						// Added samwx
set_value( hel_field, "q_start", P_hel_start );					// Added samwx
set_value( hel_field, "p_run", P_hel_track );					// Added samwx
set_value( hel_field, "v_wind_max", wind_stow_speed );			// Added samwx
set_value( hel_field, "hel_stow_deploy", hel_stow_deploy );		// Added samwx

// Connect heliostat field inputs
connect( weather, "wspd", hel_field, "vwind" );
connect( weather, "solzen", hel_field, "theta" );
connect( weather, "solazi", hel_field, "phi" );
set_value( hel_field, "field_control", 1.0 );			// Do we need to adjust defocus?

// Set receiver parameters
set_value( receiver, "N_panels", num_panels );				// Added samwx
set_value( receiver, "D_rec", d_rec );						// Added samwx
set_value( receiver, "H_rec", h_rec );						// Added samwx
set_value( receiver, "THT", h_tower );						// Added samwx
set_value( receiver, "d_tube_out", d_tube );				// Added samwx
set_value( receiver, "th_tube", th_tube );					// Added samwx
set_value( receiver, "mat_tube", Material );				// Added samwx
set_value( receiver, "rec_htf", HTF );						// Added samwx
set_value( receiver, "Flow_type", flow_pattern );			// Added samwx
set_value( receiver, "epsilon", epsilon );					// Added samwx
set_value( receiver, "hl_ffact", hl_ffact );				// Added samwx
set_value( receiver, "T_htf_hot_des", HTF_rec_out );		
set_value( receiver, "T_htf_cold_des", T_HTF_out_ref );
set_value( receiver, "f_rec_min", f_rec_min );				// Added samwx
set_value( receiver, "Q_rec_des", Q_rec_des );
set_value( receiver, "rec_su_delay", rec_su_delay );		// Added samwx
set_value( receiver, "rec_qf_delay", rec_qf_delay );		// Added samwx
set_value( receiver, "m_dot_htf_max", Rec_HTF_max_flow );
set_value( receiver, "A_sf", A_sf );						// Added samwx
set_value( receiver, "is_direct_iscc", is_iscc );
set_value( receiver, "cycle_config", cycle_config );
set_value( receiver, "fluxmap_angles", arr_sol_pos);
set_value( receiver, "fluxmap", arr_flux);

// Set Receiver Inputs
connect(weather, "solazi", receiver, "azimuth");
connect(weather, "solzen", receiver, "zenith");
//connect( iscc_pb, "T_htf_hot", receiver, "T_salt_hot_target" );
set_value( receiver, "T_salt_hot_target", 364 ); 
connect( iscc_pb, "T_htf_cold", receiver, "T_salt_cold" );
set_value( receiver, "T_salt_cold", 318 );
connect(weather, "wspd", receiver, "V_wind_10");
connect(weather, "pres", receiver, "P_amb");
set_value( receiver, "eta_pump", eta_rec_pump );
connect(weather, "tdew", receiver, "T_dp");
connect(weather, "beam", receiver, "I_bn");
connect(hel_field, "eta_field", receiver, "field_eff");
connect(weather, "tdry", receiver, "T_db");
set_value( receiver, "night_recirc", 0 );
set_value( receiver, "hel_stow_deploy", hel_stow_deploy );

// Set NGCC Parameters
set_value( iscc_pb, "HTF_code", HTF );
set_value( iscc_pb, "Q_sf_des", Q_rec_des );
set_value( iscc_pb, "plant_elevation", 600 );
set_value( iscc_pb, "cycle_config", 1 );			// Only option presently available: triple pressure NGCC HP evap integration
set_value( iscc_pb, "hot_side_delta_t", hot_side_delta_t);
set_value( iscc_pb, "pinch_point", pinch_point);

// Set NGCC Inputs
connect( weather, "tdry", iscc_pb, "T_amb" );
//set_value( iscc_pb, "T_amb", 10.3 );
connect( weather, "pres", iscc_pb, "P_amb" );
//set_value( iscc_pb, "P_amb", 943.2 );
connect( receiver, "m_dot_salt_tot", iscc_pb, "m_dot_ms_ss" );
//m_dot_ms = 2256 * 3600.0;			// kg/hr
//set_value( iscc_pb, "m_dot_ms_ss", m_dot_ms ); 
connect( receiver, "q_dot_ss", iscc_pb, "q_dot_rec_ss" );
//set_value( iscc_pb, "q_dot_rec_ss", 150 );		//MWt
connect( receiver, "T_salt_cold", iscc_pb, "T_rec_in" );
connect( receiver, "T_salt_hot", iscc_pb, "T_rec_out" );
//connect( receiver, "f_timestep", iscc_pb, "f_timestep" );

// Set ISSC parasitic Parameters
set_value( iscc_parasitics, "W_htf_pc_pump", PB_pump_coef );
set_value( iscc_parasitics, "Piping_loss", piping_loss );
set_value( iscc_parasitics, "Piping_length", piping_length );
//set_value( iscc_parasitics, "Piping_loss", 0.0 );
//set_value( iscc_parasitics, "Piping_length", 0.0 );
set_value( iscc_parasitics, "Q_sf_des", Q_rec_des );
//set_value( iscc_parasitics, "pb_fixed_par", 0.0 );
set_value( iscc_parasitics, "pb_fixed_par", pb_fixed_par );
set_value( iscc_parasitics, "bop_par", bop_par );
set_value( iscc_parasitics, "bop_par_f", bop_par_f );
set_value( iscc_parasitics, "bop_par_0", bop_par_0 );
set_value( iscc_parasitics, "bop_par_1", bop_par_1 );
set_value( iscc_parasitics, "bop_par_2", bop_par_2 );
set_value( iscc_parasitics, "W_dot_fossil_des", 465.198 );
set_value( iscc_parasitics, "W_dot_solar_des", 64.5096 );

// Connect ISCC parasitic Inputs
connect( hel_field, "pparasi", iscc_parasitics, "W_dot_tracking" );
connect( receiver, "W_dot_pump", iscc_parasitics, "W_dot_rec_pump" );
connect( receiver, "m_dot_ss", iscc_parasitics, "m_dot_htf_ss" );
connect( iscc_pb, "W_dot_pc_hybrid", iscc_parasitics, "W_dot_pc_hybrid" );
connect( iscc_pb, "W_dot_pc_fossil", iscc_parasitics, "W_dot_pc_fossil" );
connect( receiver, "f_timestep", iscc_parasitics, "f_timestep" );
connect( receiver, "q_dot_ss", iscc_parasitics, "q_solar_ss" );
connect(iscc_pb, "q_dot_fuel", iscc_parasitics, "q_dot_fuel");

simulate(1,8760,1,30,false);

