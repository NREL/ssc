clear();

//****** Get SSC directory ********
trough_csv = env('SSCDIR')+'/tcsdata/typelib/Physical_Trough_Ty/24hours.csv';
//*********************************
// CSV needs columns with exact names: hr, I_b, T_db, V_wind, P_amb, T_dp, T_cold_in, defocus

trough_data = csvread(trough_csv, {'table' = true, 'numeric' = true});

// Check that required columns exist
if(trough_data.hr == null)
{
	outln("CSV requires column with name 'hr'.");
	exit;
}

if(trough_data.I_b == null)
{
	outln("CSV requires column with name 'I_b'.");
	exit;
}

if(trough_data.T_db == null)
{
	outln("CSV requires column with name 'T_db'.");
	exit;
}

if(trough_data.V_wind == null)
{
	outln("CSV requires column with name 'V_wind'.");
	exit;
}

if(trough_data.P_amb == null)
{
	outln("CSV requires column with name 'P_amb'.");
	exit;
}

if(trough_data.T_dp == null)
{
	outln("CSV requires column with name 'T_dp'.");
	exit;
}

if(trough_data.T_cold_in == null)
{
	outln("CSV requires column with name 'T_cold_in'.");
	exit;
}

if(trough_data.defocus == null)
{
	outln("CSV requires column with name 'defocus'.");
	exit;
}

time_start_hr = trough_data.hr[0];
time_end_hr = trough_data.hr[#trough_data.hr-1];
time_step_hr = trough_data.hr[1] - trough_data.hr[0];
n_steps_calc = (time_end_hr - time_start_hr)/time_step_hr + 1;
n_steps = #trough_data.hr;

if(n_steps != n_steps_calc)
{
	outln("The number of timesteps in the CSV file do not match the number of timesteps calcualted from the start time, stop time, and timestep length (calculated from the first two timesteps). Please the CSV");
	exit;
}

outln("The simulation starts at ", time_start_hr, " [hr]");
outln("The simulation ends at ", time_end_hr, " [hr]");
outln("The simulation advances at ", time_step_hr, " [hr] timesteps");
outln("The total number of timesteps to simulate is ", n_steps);

//Add Type251 input generator
input_gen = add_unit("sam_type250_input_generator");

set_value(input_gen, "I_b", trough_data.I_b);
set_value(input_gen, "T_db", trough_data.T_db);
set_value(input_gen, "V_wind", trough_data.V_wind);
set_value(input_gen, "P_amb", trough_data.P_amb);
set_value(input_gen, "T_dp", trough_data.T_dp);
set_value(input_gen, "T_cold_in", trough_data.T_cold_in);
set_value(input_gen, "m_dot_in", trough_data.T_cold_in);		// Need to fill this input array, but not required in this mode
set_value(input_gen, "defocus", trough_data.defocus);

//Add the solar field collector unit
solarfield = add_unit("sam_mw_trough_type250");

//Set parameters
set_value(solarfield, "nSCA", 8);//check
set_value(solarfield, "nHCEt", 4);//check
set_value(solarfield, "nColt", 4);
set_value(solarfield, "nHCEVar", 4);
set_value(solarfield, "nLoops", 230);//check
set_value(solarfield, "eta_pump", 0.85);//check
set_value(solarfield, "HDR_rough", 4.57E-05);//check
set_value(solarfield, "theta_stow", 170);//check
set_value(solarfield, "theta_dep", 10);//check
set_value(solarfield, "Row_Distance", 15);//check
set_value(solarfield, "FieldConfig", 2);
set_value(solarfield, "T_startup", 300);
set_value(solarfield, "pb_rated_cap", 111);										//check
set_value(solarfield, "m_dot_htfmin", 1);										//check
set_value(solarfield, "m_dot_htfmax", 12);										//check
set_value(solarfield, "T_loop_in_des", 293);									//check
set_value(solarfield, "T_loop_out", 391);										//check
set_value(solarfield, "Fluid", 21);
set_value(solarfield, "T_field_ini", 150);
set_value(solarfield, "T_fp", 150);
set_value(solarfield, "I_bn_des", 950);											//check
set_value(solarfield, "V_hdr_max", 3);											//check
set_value(solarfield, "V_hdr_min", 2);											//check
set_value(solarfield, "Pipe_hl_coef", 0.45);
set_value(solarfield, "SCA_drives_elec", 125);
set_value(solarfield, "fthrok", 1);
set_value(solarfield, "fthrctrl", 2);
set_value(solarfield, "ColTilt", 0);											//check
set_value(solarfield, "ColAz", 0);												//check

set_value(solarfield, "solar_mult", 2);											//check
set_value(solarfield, "mc_bal_hot", 0.2);										//thermal inertia?
set_value(solarfield, "mc_bal_cold", 0.2);										//thermal inertia?
set_value(solarfield, "mc_bal_sca", 4.5);										//check
set_value(solarfield, "OptCharType", [1,1,1,1]);
set_value(solarfield, "CollectorType", [1,1,1,1]);								//check
set_value(solarfield, "W_aperture", [5,5,5,5]);									//check
set_value(solarfield, "A_aperture", [470.3,470.3,470.3,470.3]);					//check
set_value(solarfield, "IamF0", [1,1,1,1]);										//check
set_value(solarfield, "IamF1", [0.0506,0.0506,0.0506,0.0506]);					//check
set_value(solarfield, "IamF2", [-0.1763,-0.1763,-0.1763,-0.1763]);				//check
set_value(solarfield, "reflectivity", [1,1,1,1]);
set_value(solarfield, "TrackingError", [0.994,0.994,0.994,0.994]);				//check
set_value(solarfield, "GeomEffects", [0.98,0.98,0.98,0.98]);					//check
set_value(solarfield, "Rho_mirror_clean", [0.935,0.935,0.935,0.935]);			//check
set_value(solarfield, "Dirt_mirror", [0.95,0.95,0.95,0.95]);					//check
set_value(solarfield, "Error", [0.99,0.99,0.99,0.99]);							//check
set_value(solarfield, "Ave_Focal_Length", [1.8,1.8,1.8,1.8]);					//check
set_value(solarfield, "L_SCA", [100,100,100,100]);								//check
set_value(solarfield, "L_aperture", [8.33333,8.33333,8.33333,8.33333]);			//check
set_value(solarfield, "ColperSCA", [12,12,12,12]);								//check
set_value(solarfield, "Distance_SCA", [1,1,1,1]);								//check
set_value(solarfield, "HCE_FieldFrac", [[0.985,0.01,0.005,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]]);					//check
set_value(solarfield, "D_2", [[0.066,0.066,0.066,0.066],[0.066,0.066,0.066,0.066],[0.066,0.066,0.066,0.066],[0.066,0.066,0.066,0.066]]);		//check (why 4 per HCE?)
set_value(solarfield, "D_3", [[0.07,0.07,0.07,0.07],[0.07,0.07,0.07,0.07],[0.07,0.07,0.07,0.07],[0.07,0.07,0.07,0.07]]);						//check (why 4 per HCE?)
set_value(solarfield, "D_4", [[0.115,0.115,0.115,0.115],[0.109,0.109,0.109,0.109],[0.109,0.109,0.109,0.109],[0.109,0.109,0.109,0.109]]);		//check (why 4 per HCE?)
set_value(solarfield, "D_5", [[0.12,0.12,0.12,0.12],[0.115,0.115,0.115,0.115],[0.115,0.115,0.115,0.115],[0.115,0.115,0.115,0.115]]);						//check (why 4 per HCE?)
set_value(solarfield, "D_p", [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]);																		//check (why 4 per HCE?)
set_value(solarfield, "Flow_type", [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]);																	//check (why 4 per HCE?)
set_value(solarfield, "Rough", [[4.50E-05,4.50E-05,4.50E-05,4.50E-05],[4.570E-05,4.570E-05,4.570E-05,4.570E-05],[4.570E-05,4.570E-05,4.570E-05,4.570E-05],[4.570E-05,4.570E-05,4.570E-05,4.570E-05]]); //check (why 4 per HCE?)
set_value(solarfield, "alpha_env", [[0.02,0.02,0,0],[0.02,0,0,0],[0.02,0,0,0],[0.02,0,0,0]]);											//check
set_value(solarfield, "epsilon_3_11", [[100,150,200,250,300,350,400,450,500],[0.064,0.0665,0.07,0.0745,0.08,0.0865,0.094,0.1025,0.112]]);		//check
set_value(solarfield, "epsilon_3_12", [[0],[0.65]]);																							//check
set_value(solarfield, "epsilon_3_13", [[0],[0.65]]);																							//check
set_value(solarfield, "epsilon_3_14", [[0],[0]]);																								//check
set_value(solarfield, "epsilon_3_21", [[0],[0.1384]]);
set_value(solarfield, "epsilon_3_22", [[0],[0.0]]);
set_value(solarfield, "epsilon_3_23", [[0],[0.0]]);
set_value(solarfield, "epsilon_3_24", [[0],[0]]);
set_value(solarfield, "epsilon_3_31", [[0],[0.1384]]);
set_value(solarfield, "epsilon_3_32", [[0],[0.0]]);
set_value(solarfield, "epsilon_3_33", [[0],[0.0]]);
set_value(solarfield, "epsilon_3_34", [[0],[0]]);
set_value(solarfield, "epsilon_3_41", [[0],[0.1384]]);
set_value(solarfield, "epsilon_3_42", [[0],[0.0]]);
set_value(solarfield, "epsilon_3_43", [[0],[0.0]]);
set_value(solarfield, "epsilon_3_44", [[0],[0]]);
set_value(solarfield, "alpha_abs", [[0.96,0.96,0.8,0],[0.95,0,0,0],[0.95,0,0,0],[0.95,0,0,0]]);									//check
set_value(solarfield, "Tau_envelope", [[0.963,0.963,1,0],[0.963,0.963,1,0],[0.963,0.963,1,0],[0.963,0.963,1,0]]);								//check
set_value(solarfield, "EPSILON_4", [[0.86,0.86,1,0],[0.86,0.86,1,0],[0.86,0.86,1,0],[0.86,0.86,1,0]]);											//check
set_value(solarfield, "EPSILON_5", [[0.86,0.86,1,0],[0.86,0.86,1,0],[0.86,0.86,1,0],[0.86,0.86,1,0]]);
set_value(solarfield, "GlazingIntactIn", [[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]);															//check
set_value(solarfield, "P_a", [[0.0001,750,750,0],[0.0001,0,0,0],[0.0001,0,0,0],[0.0001,0,0,0]]);									//check
set_value(solarfield, "AnnulusGas", [[27,1,1,27],[27,1,1,27],[27,1,1,27],[27,1,1,27]]);															//check, if 27=hydrogen & 1=air
set_value(solarfield, "AbsorberMaterial", [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]);															// 1=304L?
set_value(solarfield, "Shadowing", [[0.96,0.96,0.96,0.963],[0.963,0.963,0.963,0.963],[0.963,0.963,0.963,0.963],[0.963,0.963,0.963,0.963]]);				//check
set_value(solarfield, "Dirt_HCE", [[0.98,0.98,1,0.98],[0.98,0.98,1,0.98],[0.98,0.98,1,0.98],[0.98,0.98,1,0.98]]);								//check
set_value(solarfield, "Design_loss", [[150,1100,1500,0],[250,0,0,0],[250,0,0,0],[250,0,0,0]]);
set_value(solarfield, "SCAInfoArray", [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]);
set_value(solarfield, "SCADefocusArray", [8,7,6,5,4,3,2,1]);

//Set the initial values
//set_value(solarfield, "I_b", 0.);
//set_value(solarfield, "T_db", 15.);
//set_value(solarfield, "V_wind", 1.5);
//set_value(solarfield, "P_amb", 1.);
//set_value(solarfield, "T_dp", 10.);
//set_value(solarfield, "SolarAz", 0.);
//set_value(solarfield, "defocus", 1.);
//set_value(solarfield, "T_cold_in", 293.);

//Set the inputs
//connect(weather, "beam", solarfield, "I_b", 0);
//connect(weather, "tdry", solarfield, "T_db", 0);
//connect(weather, "wspd", solarfield, "V_wind", 0);
//connect(weather, "pres", solarfield, "P_amb", 0);
//connect(weather, "tdew", solarfield, "T_dp", 0);
//connect(weather, "solazi", solarfield, "SolarAz", 0);
//connect(weather, "lat", solarfield, "latitude", 0);
//connect(weather, "lon", solarfield, "longitude", 0);
//connect(weather, "shift", solarfield, "shift", 0);
//connect(controller, "defocus", solarfield, "defocus");
//connect(controller, "T_field_in", solarfield, "T_cold_in");

// ***** Need to set Solar Azimuth MODE *****
set_value(solarfield, "accept_mode", 0);
set_value(solarfield, "accept_init", 0);
set_value(solarfield, "accept_loc", 1);
set_value(solarfield, "using_input_gen", 1);

// Connect Type 250 inputs to Input Gen outputs (or constants)
connect(input_gen, "O_I_b", solarfield, "I_b");
connect(input_gen, "O_T_db", solarfield, "T_db");
connect(input_gen, "O_V_wind", solarfield, "V_wind");
connect(input_gen, "O_P_amb", solarfield, "P_amb");
connect(input_gen, "O_T_dp", solarfield, "T_dp");
connect(input_gen, "O_T_cold_in", solarfield, "T_cold_in");
connect(input_gen, "O_m_dot_in", solarfield, "m_dot_in");
connect(input_gen, "O_defocus", solarfield, "defocus");
set_value(solarfield, "SolarAz", 0.0);			// Not used as input in 'this' mode
set_value(solarfield, "latitude", 32.11667);
set_value(solarfield, "longitude", 110.9333);
set_value(solarfield, "shift", -5.9333);

simulate(time_start_hr, time_end_hr, time_step_hr);

//simulate(1,8760,1,30,false);

