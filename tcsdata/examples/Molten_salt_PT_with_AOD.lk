clear();

// *****Set input values ***********************

// **** Define tcs directory *******************
data_dir = 'C:\\Users\\mwagner\\Documents\\NREL\\Work for others\\KACARE\\Annual simulation\\';
//Set weather parameters
weather_file = "C:/SAM/2013.9.20/weather/AZ Phoenix Sky Harbor 722780TY.csv"; //ESP_Almeria_SWEC.epw"; //CA Daggett.tm2";  Note that almeria is a good example of a consistent AOD

//********* Heliostat field parameters *********
aod = [0.05, 0.1, 0.2, 0.4, 0.6]; 	//Aerosol optical depth corresponding with each eff_array file (in order)
n_helio = 8929;			//Number of heliostats in the field
cs_cutoff = 0.6;		//The fraction of observed DNI to clear-sky DNI above which AOD is recalculated.

//********* Receiver parameters ******************
D_rec = 17.67;			//[m] Receiver diameter
H_rec = 20.41;			//[m] Receiver height
THT = 203.33;			//[m] Tower optical height (height of the receiver midpoint above the heliostat mounting point)	
h_helio = 12.2;			//[m] Heliostat height
w_helio = 12.2;			//[m] Heliostat width
hel_reflect_fraction = 0.97;		//[-] Fraction of the total heliostat structure area that reflects sunlight
HTF_type = 17; 			//[-] HTF Type (17 = 60% NaNO3 + 40% KNO3, 10 = 46.% LiF + 11.5% NaF + 42% KF)
f_rec_max = 1.2;		//[-] Maximum receiver thermal load fraction

//********* Controller parameters ******************
solarm = 2.4;
tshours = 20.;			//[hr] Hours of full-load thermal storage
tank_pairs = 1;
h_tank = 20.0;
cycle_max_fraction = 1.05;
cycle_cutoff_frac = 0.25;
pb_pump_coef = 0.55;
tes_pump_coef = 0.15;
fossil_mode = 1;
F_standby = 0.2;
T_standby = 2.0;


//********* Powerblock Parameters ******************
P_cycle_design = 115; 	//[MWe] Power cycle gross design power
eff_cycle_design = 0.412;	//[-] Design-point cycle conversion efficiency
T_amb_des = 43.0;
T_HTF_hot_ref = 574.0;
T_HTF_cold_ref = 290.0;
P_boiler = 100.0;
Cool_type = 2; 			//[-] Heat rejection type (1=Wet, 2=Dry)
startup_time = 0.5;		//[hr] Minimum time required for power block startup
startup_frac = 0.5;		//[-] Fraction of full-load thermal energy required for startup
dT_cooling_ref = 10.0;	
T_approach = 5.0;		
T_ITD_des = 16.0;
P_cond_ratio = 1.0028;
pb_bd_frac = 0.02;
P_cond_min = 2.0;
hr_pl_nlev = 8;


//********* Parasitics Parameters ******************
P_storage_pump = 0.0;
piping_loss = 10200;
piping_length = 528.658;
recirc_htr_eff = 1.0;
pb_fixed_par = 0.0055;
bop_par = 0.0;
bop_par_0 = 0.483;
bop_par_1 = 0.571;
bop_par_2 = 0.0;
bop_par_f = 1.0;
aux_par = 0.023;
aux_par_0 = 0.483;
aux_par_1 = 0.571;
aux_par_2 = 0.0;
aux_par_f = 1.0;
storage_bypass = 0.0;


//********************************************************************************************
//Calculations
A_sf = n_helio*h_helio*w_helio*hel_reflect_fraction; 	//Solar field aperture area
Q_rec_des = P_cycle_design/eff_cycle_design*solarm; //669.903;	

function cp_17(T){	
	T_K = T + 273.15;
	return -1E-10*T_K*T_K*T_K + 2E-07*T_K*T_K + 5E-06*T_K + 1.4387;
}
function rho_17(T){
	T_K = T+273.15;
	return max(-1E-07*T_K*T_K*T_K + 0.0002*T_K*T_K - 0.7875*T_K + 2299.4,1000.0);
}
function rho_10(T){
	T_K = T+273.15;
	return -2E-09*T_K*T_K*T_K + 1E-05*T_K*T_K - 0.7427*T_K + 2734.7;
}

Tave = (T_HTF_hot_ref + T_HTF_cold_ref)/2.;

if(HTF_type == 17){
	cp_ref = cp_17(Tave);
	rho_ref = rho_17(Tave);
}
else if(HTF_type == 10){
	cp_ref = 2.01;
	rho_ref = rho_10(Tave);
}
else{
	outln("Invalid HTF type!");
	exit;
}

q_pb_design = P_cycle_design/eff_cycle_design;

m_dot_htf_max = Q_rec_des*1e3/(cp_ref*(T_HTF_hot_ref - T_HTF_cold_ref))*3600*f_rec_max; 	//[kg/s]
T_set_aux = T_HTF_hot_ref; 		//
T_store_hot_initial = T_HTF_hot_ref;
T_store_cold_initial = T_HTF_cold_ref;
V_tank_tot = q_pb_design*1.e3*tshours/((T_HTF_hot_ref - T_HTF_cold_ref)*cp_ref*rho_ref)*3600.;
V_store_hot_initial = 0.3*V_tank_tot;
T_htr_ctank = T_HTF_cold_ref-30;
T_htr_htank = T_HTF_hot_ref-65;
Q_max_htank = q_pb_design*0.2;
HTF_rec_out = T_HTF_hot_ref;
Cycle_min_inlet_temp = T_HTF_hot_ref-75;



//********************************************************************************************
// Pre-processing input files
//Read in field efficiency files
nfiles = #aod;
num_azi = 13;
num_zen = 8;
eta_field_map = alloc( nfiles * num_azi * num_zen, 4);

num_sol_pos = num_azi * num_zen; 

for(nf = 0; nf < nfiles; nf++ ){
	fname = sprintf('eff_array_%d.dat',nf+1);
	eff_array_loc = data_dir + fname;
	f = open( eff_array_loc, 'r' );

	if( !f )
	{
		outln(sprintf("Could not open %s for reading",fname));
		exit;
	}

	line = 'string';
	read_line(f, line);
	azimuth = split( line, ',' );
	read_line(f, line);
	zenith = split( line, ',' );

	for( i = 0; i < num_azi; i++ )
		for( j = 0; j < num_zen; j++ )
		{
			eta_field_map[nf*num_sol_pos + i*num_zen+j][0] = zenith[j];
			eta_field_map[nf*num_sol_pos + i*num_zen+j][1] = azimuth[i]; 
			eta_field_map[nf*num_sol_pos + i*num_zen+j][2] = aod[nf];
		}

	for( i = 0; i < num_sol_pos; i++ )
	{
		read_line(f, eta_field_map[nf*num_sol_pos + i][3]);
	}
	close( f );
}

//***** Read in flux file ********
fluxmap_loc = data_dir + 'fluxmap.csv';
f = open( fluxmap_loc, 'r' );

if( !f )
{
	outln("Could not open file for reading");
	exit;
}

i = 1;
while( read_line(f, line) )
{
	linedat = split(line,",");
	
	if( #linedat > 0){
		if( linedat[0] == ' Azimuth' ) 	
			break;
	}
	i++;
	if( i > 200 ) 	
	{
		outln("Flux map is not using recognized formatting. Exiting..");
		exit;
	}
}

num_sol_pos = i - 5;
arr_sol_pos = alloc( 2, num_sol_pos );

close( f );
f = open( fluxmap_loc, 'r' );

for( i = 0; i < 4; i++ )
{
	read_line(f, line);
}

// Read and save azimuth and zenith angles
for( i = 0; i < num_sol_pos; i++ )
{
	read_line( f, line );
	parts = split( line, ',' );
	arr_sol_pos[0][i] = parts[2];		// Azimuth 
	arr_sol_pos[1][i] = parts[3];		// Zenith
}

// Read and save flux maps and each solar position [solar position],[flux]
arr_flux = alloc( num_sol_pos, 12 );

for( i = 0; i < 3; i++ )
	read_line(f, line);

for( i = 0; i < num_sol_pos; i++ )
{
	// Reading flux map for i_th solar position: 1 rows, 12 columns
	read_line(f, line);
	parts = split( line, ',' );
	for( j = 0; j < 12; j++ )
		arr_flux[i][j] = parts[j];
	
	// If there are solar positions remaining, skip blanks rows
	if( i < (num_sol_pos - 1))
	{
		for( l = 0; l < 5; l++ )
		{	
			read_line( f, line );
		}
	}
}
outln( "read in flux map" );
//********************************************************************************************
//********************************************************************************************

weather = add_unit("weatherreader");

set_value(weather, "file_name", weather_file);
set_value(weather, "track_mode", 1);
set_value(weather, "tilt", 0);
set_value(weather, "azimuth", 0);


//hel_field = add_unit("sam_mw_pt_type221");
tou_translator = add_unit("tou_translator");
hel_field = add_unit("Heliostat3DInterp");
receiver = add_unit("sam_mw_pt_type222");
controller = add_unit("sam_mw_trough_type251");
powerblock = add_unit("sam_mw_pt_type224");
parasitics = add_unit("sam_mw_pt_type228");
aod_calc = add_unit("atmospheric_aod");
sumcalcs = add_unit("sam_mw_csp_SumCalcs");

//Set AOD calculator parameters
set_value( aod_calc, "cs_cutoff", cs_cutoff);
//Set inputs
connect(weather, "solzen", aod_calc, "SunEl");
connect(weather, "beam", aod_calc, "dni_act");
connect(weather, "pres", aod_calc, "press");
connect(weather, "tdry", aod_calc, "temp");
connect(weather, "rhum", aod_calc, "rh");
connect(weather, "albedo", aod_calc, "albedo");

// Set heliostat field parameters
set_value( hel_field, "eta_map", eta_field_map );
set_value( hel_field, "n_hel", n_helio );
set_value( hel_field, "q_start", 0.025 );
set_value( hel_field, "p_run", 0.055 );
set_value( hel_field, "v_wind_max", 15.0 );
set_value( hel_field, "hel_stow_deploy", 8 );

// Set heliostat field inputs
connect( weather, "wspd", hel_field, "vwind" );
connect( weather, "solzen", hel_field, "theta" );
connect( weather, "solazi", hel_field, "phi" );
connect( controller, "defocus", hel_field, "field_control" );
connect( aod_calc, "AOD", hel_field, "aod" );
// Set initial value for input from controller
set_value( controller, "defocus", 1.0 );

// Set Receiver Parameters
set_value( receiver, "N_panels", 20 );
set_value( receiver, "D_rec", D_rec );
set_value( receiver, "H_rec", H_rec );
set_value( receiver, "THT", THT );
set_value( receiver, "d_tube_out", 40.0 );
set_value( receiver, "th_tube", 1.25 );
set_value( receiver, "mat_tube", 2 );
set_value( receiver, "rec_htf", HTF_type );
//set_value( receiver, "field_fl_props", {} );
set_value( receiver, "Flow_type", 1 );
set_value( receiver, "epsilon", 0.88 );
set_value( receiver, "hl_ffact", 1 );
set_value( receiver, "T_htf_hot_des", 574 );
set_value( receiver, "T_htf_cold_des", 290 );
set_value( receiver, "f_rec_min", 0.25 );
set_value( receiver, "Q_rec_des", Q_rec_des );
set_value( receiver, "rec_su_delay", 0.2 );
set_value( receiver, "rec_qf_delay", 0.25 );
set_value( receiver, "m_dot_htf_max", m_dot_htf_max );
set_value( receiver, "A_sf", A_sf );
set_value( receiver, "fluxmap_angles", arr_sol_pos);
set_value( receiver, "fluxmap", arr_flux);
// ***** End of Receiver Parameters ******

set_value( receiver, "azimuth", 174.309 );
set_value( receiver, "zenith", 58.0268 );
set_value( receiver, "T_salt_hot_target", 574 ); 
set_value( receiver, "T_salt_cold", 289.874 );
set_value( receiver, "V_wind_10", 0.0 );
set_value( receiver, "P_amb", 956.0 );
set_value( receiver, "eta_pump", 0.85 );
set_value( receiver, "T_dp", -5.65 );
set_value( receiver, "I_bn", 941.0 );
set_value( receiver, "field_eff", 0.535 );
set_value( receiver, "T_db", 10.3 );
set_value( receiver, "night_recirc", 0 );
set_value( receiver, "hel_stow_deploy", 8 );

// Connect the Receiver inputs to other types
night_recirc = 0.0;
connect(weather, "solazi", receiver, "azimuth");
connect(weather, "solzen", receiver, "zenith");
set_value( receiver, "T_salt_hot_target", 574.0 );
connect(controller, "T_field_in", receiver, "T_salt_cold");
connect(weather, "wspd", receiver, "V_wind_10");
connect(weather, "pres", receiver, "P_amb");
set_value( receiver, "eta_pump", 0.85 );
connect(weather, "tdew", receiver, "T_dp");
connect(weather, "beam", receiver, "I_bn");
connect(hel_field, "eta_field", receiver, "field_eff");
connect(weather, "tdry", receiver, "T_db");
set_value( receiver, "night_recirc", night_recirc );
set_value( receiver, "hel_stow_deploy", 8 ); 
// Set initial values for inputs generated from subsequently called types
set_value( receiver, "T_salt_cold", 290.0 );
set_value( receiver, "field_eff", 0.0 );
// **** End of Receiver Inputs ********

// update to use tou_translator
set_value(tou_translator, "weekday_schedule", [
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]);
set_value(tou_translator, "weekend_schedule", [
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]);

// Set Controller Parameters
set_value(controller, "field_fluid", HTF_type); 
set_value(controller, "field_fl_props", [0]);
set_value(controller, "store_fluid", HTF_type);
set_value(controller, "user_fluid", [0]);
set_value(controller, "tshours", tshours);
set_value(controller, "is_hx", 0);
set_value(controller, "dt_hot", 0);
set_value(controller, "dt_cold", 0);
set_value(controller, "hx_config", 0);
set_value(controller, "q_max_aux", q_pb_design);
set_value(controller, "T_set_aux", T_set_aux);
set_value(controller, "V_tank_hot_ini", V_store_hot_initial);
set_value(controller, "T_tank_hot_ini", T_store_hot_initial);
set_value(controller, "T_tank_cold_ini", T_store_cold_initial);
set_value(controller, "vol_tank", V_tank_tot);
set_value(controller, "h_tank", h_tank);
set_value(controller, "h_tank_min", 1.);
set_value(controller, "u_tank", 0.4);
set_value(controller, "tank_pairs", tank_pairs);
set_value(controller, "cold_tank_Thtr", T_htr_ctank);
set_value(controller, "hot_tank_Thtr", T_htr_htank);
set_value(controller, "tank_max_heat", Q_max_htank);
set_value(controller, "T_field_in_des", T_HTF_cold_ref);
set_value(controller, "T_field_out_des", T_HTF_hot_ref);
set_value(controller, "q_pb_design", q_pb_design);
set_value(controller, "W_pb_design", P_cycle_design);
set_value(controller, "cycle_max_frac", cycle_max_fraction);
set_value(controller, "cycle_cutoff_frac", cycle_cutoff_frac);
set_value(controller, "solarm", solarm);
set_value(controller, "pb_pump_coef", pb_pump_coef);
set_value(controller, "tes_pump_coef", tes_pump_coef);
set_value(controller, "pb_fixed_par", pb_fixed_par);
set_value(controller, "aux_array", [aux_par,aux_par_f,aux_par_0,aux_par_1,aux_par_2]);
set_value(controller, "bop_array", [bop_par,bop_par_f,bop_par_0,bop_par_1,bop_par_2]);
set_value(controller, "T_startup", Cycle_min_inlet_temp);
set_value(controller, "fossil_mode", fossil_mode);
set_value(controller, "fthr_ok", 1);
set_value(controller, "nSCA", 1);
set_value(controller, "I_bn_des", 950.);
set_value(controller, "fc_on", 0);
set_value(controller, "q_sby_frac", F_standby);
set_value(controller, "t_standby_reset", T_standby);
set_value(controller, "sf_type", 2);
set_value(controller, "tes_type", 1);
set_value(controller, "tslogic_a", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tslogic_b", [0,0,0,0,0,0,0,0,0]);
set_value(controller, "tslogic_c", [1,1,1,1,1,1,1,1,1]);	//Not sure if TOU schedule is synced, so make all variables independent of it
set_value(controller, "ffrac", [0,0,0,0,0,0,0,0,0]);
TC_Fill = 8;
set_value(controller, "tc_fill", TC_Fill);
f_void = 0.25;
set_value(controller, "tc_void", f_void);
T_dis_out_min = 500.0;
set_value(controller, "t_dis_out_min", T_dis_out_min);
T_ch_out_max = 400.0;
set_value(controller, "t_ch_out_max", T_ch_out_max);
tc_nodes = 100.0;
set_value(controller, "nodes", tc_nodes);
f_TC_cold = 0.7;
set_value(controller, "f_tc_cold", f_TC_cold);
//***** TOU_schedule is currently set in type 251, but will eventually need to be set in script
// ********* End Controller Parameters ********************

// Set Controller Inputs
connect( weather, "beam", controller, "I_bn" );
connect( receiver, "m_dot_salt_tot", controller, "m_dot_field" );
connect( powerblock, "m_dot_htf_ref", controller, "m_dot_htf_ref" );
connect( receiver, "T_salt_hot", controller, "T_field_out" );
connect( powerblock, "T_htf_cold", controller, "T_pb_out" );
connect( weather, "tdry", controller, "T_amb" );
connect( powerblock, "m_dot_demand", controller, "m_pb_demand" );	//This is input is not used by the controller
connect( receiver, "q_startup", controller, "q_startup" );		// This input is not used by the controller
// Set initial values for inputs generated from subsequently called types
set_value( controller, "m_dot_htf_ref", 1.0 );
set_value( controller, "T_pb_out", T_HTF_cold_ref ); 
connect(tou_translator,"tou_value",controller,"TOUPeriod");
// ******* End Controller Inputs

// Set Powerblock Parameters
set_value(powerblock, "P_ref", P_cycle_design);
set_value(powerblock, "eta_ref", eff_cycle_design);
set_value(powerblock, "T_htf_hot_ref", 574);
set_value(powerblock, "T_htf_cold_ref", T_HTF_cold_ref);
set_value(powerblock, "dT_cw_ref", dT_cooling_ref);
set_value(powerblock, "T_amb_des", 43.0);
set_value(powerblock, "HTF", HTF_type);
set_value(powerblock, "q_sby_frac", F_standby);
set_value(powerblock, "P_boil", P_boiler);
set_value(powerblock, "CT", Cool_type);
set_value(powerblock, "startup_time", startup_time);
set_value(powerblock, "startup_frac", startup_frac);
tech_type = 1;
set_value(powerblock, "tech_type", tech_type);
set_value(powerblock, "T_approach", T_approach);
set_value(powerblock, "T_ITD_des", T_ITD_des);
set_value(powerblock, "P_cond_ratio", P_cond_ratio);
set_value(powerblock, "pb_bd_frac", pb_bd_frac);
set_value(powerblock, "P_cond_min", P_cond_min);
set_value(powerblock, "n_pl_inc", hr_pl_nlev);
set_value(powerblock, "F_wc", [0,0,0,0,0,0,0,0,0]);
// **** End Powerblock Parameters ******

// Set Powerblock Inputs
set_value( powerblock, "mode", 2 );		//Always set to 2 for type 251
connect( controller, "T_pb_in", powerblock, "T_htf_hot" );
connect( controller, "m_dot_pb", powerblock, "m_dot_htf" );
connect( weather, "twet", powerblock, "T_wb" );
//set_value( powerblock, "demand_var", 110.0 );		//Don't need to set this?
connect( controller, "standby_control", powerblock, "standby_control" );
connect( weather, "tdry", powerblock, "T_db" );
connect( weather, "pres", powerblock, "P_amb");
connect( weather, "rhum", powerblock, "rh" );
// ***** End Powerblock Inputs *******

// Set Parasitics Parameters
set_value(parasitics, "P_storage_pump", P_storage_pump);
set_value(parasitics, "Piping_loss", piping_loss );
set_value(parasitics, "Piping_length", piping_length );
set_value(parasitics, "Design_power", P_cycle_design );
set_value(parasitics, "recirc_htr_eff", recirc_htr_eff );
set_value(parasitics, "design_eff", eff_cycle_design );
set_value(parasitics, "night_recirc", night_recirc );
set_value(parasitics, "pb_fixed_par", pb_fixed_par );
set_value(parasitics, "aux_par", aux_par );
set_value(parasitics, "aux_par_f", aux_par_f );
set_value(parasitics, "aux_par_0", aux_par_0 );
set_value(parasitics, "aux_par_1", aux_par_1 );
set_value(parasitics, "aux_par_2", aux_par_2 );
set_value(parasitics, "bop_par", bop_par );
set_value(parasitics, "bop_par_f", bop_par_f );
set_value(parasitics, "bop_par_0", bop_par_0 );
set_value(parasitics, "bop_par_1", bop_par_1 );
set_value(parasitics, "bop_par_2", bop_par_2 );
set_value(parasitics, "storage_bypass", storage_bypass );
//**** End Parasitics Parameters ********************

// Set Parasitics Inputs
set_value(parasitics, "flow_from_storage", 0.0);
connect(powerblock, "W_cool_par", parasitics, "P_cooling_tower");
connect(receiver, "W_dot_pump", parasitics, "P_tower_pump");
connect(hel_field, "pparasi", parasitics, "P_helio_track");
connect(powerblock, "P_cycle", parasitics, "P_plant_output");
connect(powerblock, "eta", parasitics, "eta_cycle");
connect(controller, "tank_fp_par", parasitics, "P_cold_tank");
set_value(parasitics, "P_hot_tank", 0.0);	// "tank_fp_par" from controller contains both hot and cold tank htr values
connect(receiver, "q_conv_sum", parasitics, "P_tower_conv");
connect(receiver, "q_rad_sum", parasitics, "P_tower_rad");
set_value(parasitics, "recirc_source", 0.0);
connect(powerblock, "m_dot_htf_ref", parasitics, "ref_htf_flow");
connect(controller, "q_aux_heat", parasitics, "aux_power");
connect(controller, "htf_pump_power", parasitics, "P_htf_pump");

//Connect values for summary calculations
set_value(sumcalcs, "eta_lhv", 0.9);
set_value(sumcalcs, "eta_tes_htr", 0.99);
set_value(sumcalcs, "fp_mode", 2); 		//Fossil heating
connect(powerblock, "P_cycle", sumcalcs, "W_cycle_gross");
connect(powerblock, "W_cool_par", sumcalcs, "W_par_heatrej");
connect(receiver, "W_dot_pump", sumcalcs, "W_par_sf_pump");
connect(parasitics, "P_storage_pump_tot", sumcalcs, "W_par_tes_pump");
connect(parasitics, "P_plant_balance_tot", sumcalcs, "W_par_BOP");
connect(parasitics, "P_fixed", sumcalcs, "W_par_fixed");
connect(hel_field, "pparasi", sumcalcs, "W_par_tracking");
connect(parasitics, "P_aux", sumcalcs, "W_par_aux_boiler");


simulate(1,8760,1,30,false);