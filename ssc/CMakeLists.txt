#####################################################################################################################
#
# CMake and System Settings
#
#####################################################################################################################

set(CMAKE_VERBOSE_MAKEFILE ON)

if(APPLE)
    set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9" CACHE STRING "Minimum OS X deployment version")
	set(CMAKE_MACOSX_RPATH 1)
elseif(MSVC)
    set(CMAKE_SYSTEM_VERSION 8.1 CACHE TYPE INTERNAL FORCE)
endif()

if(MSVC)
	set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Debug and Release Builds Configured" FORCE)
endif()


#####################################################################################################################
#
# Project Settings 
#
#####################################################################################################################

Project(ssc)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $<1:${CMAKE_CURRENT_SOURCE_DIR}>)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY $<1:${CMAKE_CURRENT_SOURCE_DIR}>)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY $<1:${CMAKE_CURRENT_SOURCE_DIR}>)


include_directories(. ../splinter ../shared ../nlopt ../lpsolve ../solarpilot ../tcs ../ssc)

set(SSC_SRC
		cmod_6parsolve.cpp
		cmod_annualoutput.cpp
		cmod_battery.cpp
		cmod_battwatts.cpp
		cmod_belpe.cpp
		cmod_biomass.cpp
		cmod_cashloan.cpp
		cmod_cb_construction_financing.cpp
		cmod_cb_empirical_hce_heat_loss.cpp
		cmod_cb_mspt_system_costs.cpp
		cmod_dsg_flux_preprocess.cpp
		cmod_equpartflip.cpp
		cmod_fossilgen.cpp
		cmod_fuelcell.cpp
		cmod_generic_system-builder.cpp
		cmod_generic_system.cpp
		cmod_geothermal.cpp
		cmod_geothermal_costs.cpp
		cmod_hcpv.cpp
		cmod_host_developer.cpp
		cmod_iec61853par.cpp
		cmod_inv_cec_cg.cpp
		cmod_iph_to_lcoefcr.cpp
		cmod_ippppa.cpp
		cmod_irradproc.cpp
		cmod_iscc_design_point.cpp
		cmod_layoutarea.cpp
		cmod_lcoefcr.cpp
		cmod_levpartflip.cpp
		cmod_linear_fresnel_dsg_iph.cpp
		cmod_poacalib.cpp
		cmod_pv6parmod.cpp
		cmod_pv_get_shade_loss_mpp.cpp
		cmod_pvsamv1.cpp
		cmod_pvsandiainv.cpp
		cmod_pvwattsv0.cpp
		cmod_pvwattsv1.cpp
		cmod_pvwattsv1_1ts.cpp
		cmod_pvwattsv1_poa.cpp
		cmod_pvwattsv5.cpp
		cmod_pvwattsv5_lifetime.cpp
		cmod_saleleaseback.cpp
		cmod_sco2_air_cooler.cpp
		cmod_sco2_csp_system.cpp
		cmod_sco2_csp_ud_pc_tables.cpp
		cmod_sco2_design_cycle.cpp
		cmod_sco2_design_point.cpp
		cmod_sco2_design_point.cpp
		cmod_singlediode.cpp
		cmod_singleowner.cpp
		cmod_snowmodel.cpp
		cmod_solarpilot.cpp
		cmod_swh.cpp
		cmod_tcsdirect_steam.cpp
		cmod_tcsdish.cpp
		cmod_tcsgeneric_solar.cpp
		cmod_tcsiscc.cpp
		cmod_tcslinear_fresnel.cpp
		cmod_tcsmolten_salt.cpp
		cmod_tcsmslf.cpp
		cmod_tcstrough_empirical.cpp
		cmod_tcstrough_physical.cpp
		cmod_tcstrough_physical_csp_solver.cpp
		cmod_thermalrate.cpp
		cmod_thirdpartyownership.cpp
		cmod_timeseq.cpp
		cmod_trough_physical.cpp
		cmod_trough_physical_iph.cpp
		cmod_ui_tes_calcs.cpp
		cmod_user_htf_comparison.cpp
		cmod_utilityrate.cpp
		cmod_utilityrate2.cpp
		cmod_utilityrate3.cpp
		cmod_utilityrate4.cpp
		cmod_utilityrate5.cpp
		cmod_wfcheck.cpp
		cmod_wfcsv.cpp
		cmod_wfreader.cpp
		cmod_wind_obos.cpp
		cmod_windbos.cpp
		cmod_windcsm.cpp
		cmod_windfile.cpp
		cmod_windpower.cpp
        cmod_windpower_eqns.cpp
		common.cpp
		common_financial.cpp
		core.cpp
		csp_common.cpp
		sscapi.cpp
		tckernel.cpp
		vartab.cpp
		)


#####################################################################################################################
#
# Compile Options per Platform
#
#####################################################################################################################

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 11)

if(MSVC)
	add_compile_options(/MP /W4 /w44191 /w44242  /w44266 /w44302 /w44388 /w44826 /w44905 /w44906 /w44928)
	if (CMAKE_BUILD_TYPE STREQUAL Debug)
        add_compile_options(/MDd)
        add_compile_definitions(_DEBUG)
    else()
        add_compile_options(/MD /O3)
        add_compile_definitions(NDEBUG )
    endif()
    add_compile_definitions( __DLL__ __64BIT__ __WINDOWS__ _WINDOWS _CRT_SECURE_NO_WARNINGS __VISUALC__ )
else(MSVC)
	if (APPLE)
		add_compile_options(-arch x86_64 -fno-common)
		add_definitions(-D__MACOSX__ -DWX_PRECOMP)
	else ()
		add_definitions(-D__UNIX__)
	endif()
	add_definitions(-D__64BIT__)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-unknown-pragmas -std=c++11" )
	if(CMAKE_BUILD_TYPE STREQUAL "Debug")
		set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0")
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0")
		add_compile_definitions(_DEBUG)
	else()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3" )
	endif()
endif(MSVC)

#####################################################################################################################
# 
# CMake Targets
#
#####################################################################################################################

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	add_library(sscd SHARED ${SSC_SRC})
	set(SSC_LIB sscd)
	set_property(TARGET sscd PROPERTY PREFIX "")

	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
else()
	add_library(ssc SHARED ${SSC_SRC})
	set(SSC_LIB ssc)
	if(NOT system_advisor_model_EXPORT)
		set_property(TARGET ssc PROPERTY PREFIX "")
	endif()
endif()

if (MSVC)
	set_target_properties(${SSC_LIB} PROPERTIES
        LIBRARY_OUTPUT_DIRECTORY $<1:${CMAKE_CURRENT_SOURCE_DIR}>
		RUNTIME_OUTPUT_DIRECTORY $<1:${CMAKE_CURRENT_SOURCE_DIR}>)
endif()

# dltest executable for checking ssc library
if(UNIX AND NOT system_advisor_model_EXPORT)
	add_executable(dltest ../build_osx/dltest.c)
	if (NOT APPLE)
		target_link_libraries(dltest -ldl -Wl,--no-as-needed)
		set(SSC_LIB_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${SSC_LIB}.so)
	else()
		set(SSC_LIB_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${SSC_LIB}.dylib)
	endif()
	add_custom_command(
		TARGET ${SSC_LIB}
		POST_BUILD 
		COMMAND dltest ${SSC_LIB_FILE})
endif()

# libSAM_api
if (system_advisor_model_EXPORT)
	set(CMAKE_MACOSX_RPATH 1)
	if(APPLE)
		set_property(TARGET ${SSC_LIB} PROPERTY PREFIX "lib")
		set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
		add_custom_command(
			TARGET ${SSC_LIB}
			POST_BUILD
			COMMAND install_name_tool -id @rpath/libssc.so $ENV{SSCDIR}/ssc/libssc.so
		)
	endif(APPLE)
endif()


#####################################################################################################################
#
# Link Libraries and Options
#
#####################################################################################################################

set( DEPENDENCIES
	solarpilot
	tcs
	nlopt
	shared
	lpsolve
	splinter
	)
foreach( name ${DEPENDENCIES} )
	unset(${name}_LIB CACHE)
	if(CMAKE_BUILD_TYPE STREQUAL "Debug")
		target_link_libraries(${SSC_LIB} ${name}d)
	else()
		target_link_libraries(${SSC_LIB} ${name})
	endif()
endforeach()

if (UNIX)
	target_link_libraries(${SSC_LIB} -lm -ldl -lstdc++)
endif()

if (MSVC)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS")
endif()
